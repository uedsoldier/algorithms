
/**
 * @file crc.h
 * @author José Roberto Parra Trewartha
 * @brief Cyclic Redundancy Check (CRC) Implementation Library
 * @version 0.1
 * @date 2024-01-20
 *
 * @copyright Copyright (c) 2024
 *
 * This library provides comprehensive CRC calculation functionality supporting
 * multiple standard CRC algorithms including CRC8, CRC16, and CRC32 variants.
 * It implements both table-driven and direct calculation methods for optimal
 * performance and memory usage trade-offs.
 */

#ifndef CRC_H
#define CRC_H

/**
 * @brief Controls the use of implementation names for CRC algorithms
 *
 * When enabled (set to 1), the library includes string names for each CRC
 * algorithm variant, useful for debugging and logging. Disable to save program
 * memory.
 */
#ifndef CRC_USE_IMPLEMENTATION_NAMES
#define CRC_USE_IMPLEMENTATION_NAMES 0
#endif

/**
 * @brief Controls the use of pre-computed lookup tables for CRC8 calculations
 *
 * When enabled (set to 1), uses pre-computed lookup tables for CRC8
 * calculations. Each table consumes 256 bytes of program memory but
 * significantly improves calculation speed. Disable to save memory at the cost
 * of performance.
 */
#ifndef CRC8_USE_LOOKUP_TABLE
#define CRC8_USE_LOOKUP_TABLE 0
#endif

/**
 * @brief Controls the use of pre-computed lookup tables for CRC16 calculations
 *
 * When enabled (set to 1), uses pre-computed lookup tables for CRC16
 * calculations. Each table consumes 512 bytes of program memory but
 * significantly improves calculation speed. Disable to save memory at the cost
 * of performance.
 */
#ifndef CRC16_USE_LOOKUP_TABLE
#define CRC16_USE_LOOKUP_TABLE 0
#endif

/**
 * @brief Controls the use of pre-computed lookup tables for CRC32 calculations
 *
 * When enabled (set to 1), uses pre-computed lookup tables for CRC32
 * calculations. Each table consumes 1024 bytes of program memory but
 * significantly improves calculation speed. Disable to save memory at the cost
 * of performance.
 */
#ifndef CRC32_USE_LOOKUP_TABLE
#define CRC32_USE_LOOKUP_TABLE 0
#endif

/**
 * @brief Controls debug message output
 *
 * When enabled (set to 1), debug messages will be printed to help with
 * troubleshooting. Disable for production builds to save memory and improve
 * performance.
 */
#ifndef CRC_DEBUG_ENABLE
#define CRC_DEBUG_ENABLE 0
#endif

/**
 * @brief Controls debug output destination
 *
 * Define the output function used for debug messages.
 * Defaults to printf if not defined.
 */
#ifndef CRC_DEBUG_PRINTF
#include <stdio.h>
#define CRC_DEBUG_PRINTF printf
#endif

/**
 * @brief Debug message macro
 *
 * Prints debug messages when CRC_DEBUG_ENABLE is set.
 * No code is generated when debugging is disabled.
 *
 * @param format Printf-style format string
 * @param ... Variable arguments for format string
 */
#if CRC_DEBUG_ENABLE
#define CRC_DEBUG(format, ...) CRC_DEBUG_PRINTF("CRC DEBUG: " format "\n", ##__VA_ARGS__)
#else
#define CRC_DEBUG(format, ...) ((void)0)
#endif

/**
 * @brief Error message macro
 *
 * Prints error messages when CRC_DEBUG_ENABLE is set.
 * No code is generated when debugging is disabled.
 *
 * @param format Printf-style format string
 * @param ... Variable arguments for format string
 */
#if CRC_DEBUG_ENABLE
#define CRC_ERROR(format, ...) CRC_DEBUG_PRINTF("CRC ERROR: " format "\n", ##__VA_ARGS__)
#else
#define CRC_ERROR(format, ...) ((void)0)
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

/**
 * @brief Enumeration of supported CRC algorithm variants
 *
 * This enumeration defines all supported CRC algorithm variants including:
 * - CRC8 variants (CCITT, CDMA2000, DARC, etc.)
 * - CRC16 variants (XMODEM, CCITT, KERMIT, etc.)
 * - CRC32 variants (IEEE 802.3, MPEG-2, POSIX, etc.)
 *
 * Each variant uses specific parameters (polynomial, initial value, etc.)
 * optimized for particular use cases.
 */
typedef enum crc_t {
    // CRC8 Variants
    CRC8_CCITT = 0, /**< CRC-8/CCITT - Used in I2C communication */
    CRC8_CDMA2000,  /**< CRC-8/CDMA2000 - Used in CDMA systems */
    CRC8_DARC,      /**< CRC-8/DARC - Digital Amateur Radio Communications */
    CRC8_DVB_S2,    /**< CRC-8/DVB-S2 - Digital Video Broadcasting */
    CRC8_EBU,       /**< CRC-8/EBU - European Broadcasting Union */
    CRC8_I_CODE,    /**< CRC-8/I-CODE - RFID applications */
    CRC8_ITU,       /**< CRC-8/ITU - ITU-T I.432.1 standard */
    CRC8_MAXIM,     /**< CRC-8/MAXIM - 1-Wire® bus system */
    CRC8_ROHC,      /**< CRC-8/ROHC - Robust Header Compression */
    CRC8_WCDMA,     /**< CRC-8/WCDMA - 3G mobile communications */
    CRC8_SAE_J1850, /**< CRC-8/SAE-J1850 - Vehicle networks */
    CRC8_SAE_J1850_ZERO, /**< CRC-8/SAE-J1850-ZERO - Modified J1850 */
    CRC8_AUTOSAR,   /**< CRC-8/AUTOSAR - Automotive Open System Architecture */
    CRC8_BLUETOOTH, /**< CRC-8/BLUETOOTH - Bluetooth protocol */
    CRC8_GSM_A,     /**< CRC-8/GSM-A - GSM mobile communications */
    CRC8_GSM_B,     /**< CRC-8/GSM-B - GSM mobile communications */

    // CRC16 Variants
    CRC16_XMODEM,       /**< CRC-16/XMODEM - File transfer protocol */
    CRC16_AUG_CCITT,    /**< CRC-16/AUG-CCITT - Augmented CCITT */
    CRC16_CCITT_FALSE,  /**< CRC-16/CCITT-FALSE - Modified CCITT */
    CRC16_GENIBUS,      /**< CRC-16/GENIBUS - Industrial automation */
    CRC16_CCITT_KERMIT, /**< CRC-16/KERMIT - Kermit protocol */
    CRC16_TMS37157,     /**< CRC-16/TMS37157 - Texas Instruments */
    CRC16_RIELLO,       /**< CRC-16/RIELLO - Riello UPS */
    CRC16_A,            /**< CRC-16/A - General purpose */
    CRC16_MCRF4XX,      /**< CRC-16/MCRF4XX - RFID tags */
    CRC16_X25,          /**< CRC-16/X-25 - X.25 protocol */
    CRC16_ARC,          /**< CRC-16/ARC - LHA compression */
    CRC16_BUYPASS,      /**< CRC-16/BUYPASS - Retail systems */
    CRC16_DDS110,       /**< CRC-16/DDS-110 - Data storage */
    CRC16_MAXIM,        /**< CRC-16/MAXIM - MAXIM devices */
    CRC16_USB,          /**< CRC-16/USB - USB protocol */
    CRC16_MODBUS,       /**< CRC-16/MODBUS - Modbus protocol */
    CRC16_DECT_X,       /**< CRC-16/DECT-X - DECT telephony */
    CRC16_DECT_R,       /**< CRC-16/DECT-R - DECT telephony */
    CRC16_DNP,          /**< CRC-16/DNP - DNP3 protocol */
    CRC16_EN13757,      /**< CRC-16/EN-13757 - Metering systems */
    CRC16_T10_DIF,      /**< CRC-16/T10-DIF - SCSI DIF */
    CRC16_TELEDISK,     /**< CRC-16/TELEDISK - Disk imaging */
    CRC16_CDMA2000,     /**< CRC-16/CDMA2000 - CDMA systems */

    // CRC32 Variants
    CRC32_D,      /**< CRC-32/D - General purpose */
    CRC32_Q,      /**< CRC-32/Q - Aeronautical systems */
    CRC32_C,      /**< CRC-32/C - Base-91 encoding */
    CRC32_ISO,    /**< CRC-32/ISO - ISO standard */
    CRC32_BZIP2,  /**< CRC-32/BZIP2 - BZIP2 compression */
    CRC32_MPEG_2, /**< CRC-32/MPEG-2 - MPEG-2 systems */
    CRC32_POSIX,  /**< CRC-32/POSIX - POSIX cksum */
    CRC32_JAMCRC, /**< CRC-32/JAMCRC - JAM STAPL */
    CRC32_XFER,   /**< CRC-32/XFER - XFER protocol */

    CRC_IMPL_COUNT /**< Total number of CRC implementations */
} crc_t;

/**
 * @brief Error codes for CRC functions
 */
typedef enum {
    CRC_SUCCESS = 0,              /**< Operation completed successfully */
    CRC_ERROR_NULL_DATA,          /**< NULL pointer provided for data or result */
    CRC_ERROR_ZERO_LENGTH,        /**< Data length is zero */
    CRC_ERROR_INVALID_TYPE,       /**< Invalid CRC implementation type */
    CRC_ERROR_INVALID_POLYNOMIAL, /**< Invalid polynomial for CRC calculation */
    CRC_ERROR_LOOKUP_TABLE        /**< Error with lookup table */
} crc_error_t;

#if defined(CRC8_USE_LOOKUP_TABLE) && (CRC8_USE_LOOKUP_TABLE == 1)
#define CRC8_0x07_LOOKUP_TABLE  // 0x07 --> x^8 + x^5 + x^4 + 1
#define CRC8_0x2F_LOOKUP_TABLE  // 0x2F --> x^8 + x^5 + x^3 + x^2 + x + 1
#define CRC8_0x1D_LOOKUP_TABLE  // 0x1D --> x^8 + x^4 + x^3 + x^2 + 1
#define CRC8_0x31_LOOKUP_TABLE  // 0x31 --> x^8 + x^5 + x^4 + 1
#define CRC8_0x39_LOOKUP_TABLE  // 0x39 --> x^8 + x^5 + x^4 + x^3 + 1
#define CRC8_0x9B_LOOKUP_TABLE  // 0x9B --> x^8 + x^7 + x^4 + x^3 + x + 1
#define CRC8_0xD5_LOOKUP_TABLE  // 0xD5 --> x^8 + x^7 + x^6 + x^4 + x^2 + 1
#define CRC8_0xA7_LOOKUP_TABLE  // 0xA7 --> x^8 + x^7 + x^6 + x^5 + x^4 + x^2 +
                                // x + 1
#define CRC8_0x49_LOOKUP_TABLE  // 0x49 --> x^8 + x^5 + x^4 + x^3 + x^2 + 1
#endif
#if defined(CRC16_USE_LOOKUP_TABLE) && (CRC16_USE_LOOKUP_TABLE == 1)
#define CRC16_0x1021_LOOKUP_TABLE  // 0x1021 --> x^16 + x^12 + x^5 + 1
#define CRC16_0x8005_LOOKUP_TABLE  // 0x8005 --> x^16 + x^15 + x^2 + 1
#define CRC16_0x0589_LOOKUP_TABLE  // 0x0589 --> x^16 + x^10 + x^8 + x^7 + x^3 +
                                   // 1
#define CRC16_0x3D65_LOOKUP_TABLE  // 0x3D65 --> x^16 + x^13 + x^12 + x^11 +
                                   // x^10 + x^8 + x^6 + x^5 + x^2 + 1
#define CRC16_0x8BB7_LOOKUP_TABLE  // 0x8BB7 --> x^16 + x^15 + x^11 + x^9 + x^8
                                   // + x^7 + x^5 + x^4 + x^2 + x + 1
#define CRC16_0xA097_LOOKUP_TABLE  // 0xA097 --> x^16 + x^15 + x^13 + x^7 + x^4
                                   // + x^2 + x^1 + 1
#define CRC16_0xC867_LOOKUP_TABLE  // 0xC867 --> x^16 + x^15 + x^14 + x^11 + x^6
                                   // + x^5 + x^2 + x^1 + 1
#endif
#if defined(CRC32_USE_LOOKUP_TABLE) && (CRC32_USE_LOOKUP_TABLE == 1)
#define CRC32_0xA833982B_LOOKUP_TABLE  // 0xA833982B --> x^32 + x^31 + x^29 +
                                       // x^27 + x^21 + x^20 + x^17 + x^16 +
                                       // x^15 + x^12 + x^11 + x^5 + x^3 + x + 1
#define CRC32_0x814141AB_LOOKUP_TABLE  // 0x814141AB --> x^32 + x^31 + x^24 +
                                       // x^22 + x^16 + x^14 + x^8 + x^7 + x^5 +
                                       // x^3 + x + 1
#define CRC32_0x1EDC6F41_LOOKUP_TABLE  // 0x1EDC6F41 --> x^32 + x^28 + x^27 +
                                       // x^26 + x^25 + x^23 + x^22 + x^20 +
                                       // x^19 + x^18 + x^14 + x^13 + x^11 +
                                       // x^10 + x^9 + x^8 + x^6 + 1
#define CRC32_0x04C11DB7_LOOKUP_TABLE  // 0x04C11DB7 --> x^32 + x^26 + x^23 +
                                       // x^22 + x^16 + x^12 + x^11 + x^10 + x^8
                                       // + x^7 + x^5 + x^4 + x^2 + x + 1
#define CRC32_0x000000AF_LOOKUP_TABLE  // 0x000000AF --> x^32 + x^7 + x^5 + x^3
                                       // + x^2 + x + 1
// #define CRC32_0x32583499_LOOKUP_TABLE       // 0x32583499 --> x^32 + x^29 +
// x^28 + x^25 + x^22 + x^20 + x^19 + x^13 + x^12 + x^10 + x^7 + x^4 + x^3 + 1
// #define CRC32_0x741B8CD7_LOOKUP_TABLE       // 0x741B8CD7 --> x^32 + x^30 +
// x^29 + x^28 + x^26 + x^20 + x^19 + x^17 + x^16 + x^15 + x^11 + x^10 + x^7 +
// x^6 + x^4 + x^2 + x + 1
#endif

#ifdef CRC8_0x07_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x07 --> x^8 + x^5 + x^4 + 1
 */
static const uint8_t CRC8_0x07_table[256] = {
    0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31,
    0x24, 0x23, 0x2A, 0x2D, 0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65,
    0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D, 0xE0, 0xE7, 0xEE, 0xE9,
    0xFC, 0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
    0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1,
    0xB4, 0xB3, 0xBA, 0xBD, 0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2,
    0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA, 0xB7, 0xB0, 0xB9, 0xBE,
    0xAB, 0xAC, 0xA5, 0xA2, 0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,
    0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32, 0x1F, 0x18, 0x11, 0x16,
    0x03, 0x04, 0x0D, 0x0A, 0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42,
    0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A, 0x89, 0x8E, 0x87, 0x80,
    0x95, 0x92, 0x9B, 0x9C, 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
    0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC, 0xC1, 0xC6, 0xCF, 0xC8,
    0xDD, 0xDA, 0xD3, 0xD4, 0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C,
    0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44, 0x19, 0x1E, 0x17, 0x10,
    0x05, 0x02, 0x0B, 0x0C, 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,
    0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B, 0x76, 0x71, 0x78, 0x7F,
    0x6A, 0x6D, 0x64, 0x63, 0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B,
    0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13, 0xAE, 0xA9, 0xA0, 0xA7,
    0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF,
    0xFA, 0xFD, 0xF4, 0xF3};
#endif
#ifdef CRC8_0x1D_LOOKUP_TABLE

/**
 * @brief Polinomio generador: 0x1D --> x^8 + x^4 + x^3 + x^2 + 1
 */
static const uint8_t CRC8_0x1D_table[256] = {
    0x00, 0x1D, 0x3A, 0x27, 0x74, 0x69, 0x4E, 0x53, 0xE8, 0xF5, 0xD2, 0xCF,
    0x9C, 0x81, 0xA6, 0xBB, 0xCD, 0xD0, 0xF7, 0xEA, 0xB9, 0xA4, 0x83, 0x9E,
    0x25, 0x38, 0x1F, 0x02, 0x51, 0x4C, 0x6B, 0x76, 0x87, 0x9A, 0xBD, 0xA0,
    0xF3, 0xEE, 0xC9, 0xD4, 0x6F, 0x72, 0x55, 0x48, 0x1B, 0x06, 0x21, 0x3C,
    0x4A, 0x57, 0x70, 0x6D, 0x3E, 0x23, 0x04, 0x19, 0xA2, 0xBF, 0x98, 0x85,
    0xD6, 0xCB, 0xEC, 0xF1, 0x13, 0x0E, 0x29, 0x34, 0x67, 0x7A, 0x5D, 0x40,
    0xFB, 0xE6, 0xC1, 0xDC, 0x8F, 0x92, 0xB5, 0xA8, 0xDE, 0xC3, 0xE4, 0xF9,
    0xAA, 0xB7, 0x90, 0x8D, 0x36, 0x2B, 0x0C, 0x11, 0x42, 0x5F, 0x78, 0x65,
    0x94, 0x89, 0xAE, 0xB3, 0xE0, 0xFD, 0xDA, 0xC7, 0x7C, 0x61, 0x46, 0x5B,
    0x08, 0x15, 0x32, 0x2F, 0x59, 0x44, 0x63, 0x7E, 0x2D, 0x30, 0x17, 0x0A,
    0xB1, 0xAC, 0x8B, 0x96, 0xC5, 0xD8, 0xFF, 0xE2, 0x26, 0x3B, 0x1C, 0x01,
    0x52, 0x4F, 0x68, 0x75, 0xCE, 0xD3, 0xF4, 0xE9, 0xBA, 0xA7, 0x80, 0x9D,
    0xEB, 0xF6, 0xD1, 0xCC, 0x9F, 0x82, 0xA5, 0xB8, 0x03, 0x1E, 0x39, 0x24,
    0x77, 0x6A, 0x4D, 0x50, 0xA1, 0xBC, 0x9B, 0x86, 0xD5, 0xC8, 0xEF, 0xF2,
    0x49, 0x54, 0x73, 0x6E, 0x3D, 0x20, 0x07, 0x1A, 0x6C, 0x71, 0x56, 0x4B,
    0x18, 0x05, 0x22, 0x3F, 0x84, 0x99, 0xBE, 0xA3, 0xF0, 0xED, 0xCA, 0xD7,
    0x35, 0x28, 0x0F, 0x12, 0x41, 0x5C, 0x7B, 0x66, 0xDD, 0xC0, 0xE7, 0xFA,
    0xA9, 0xB4, 0x93, 0x8E, 0xF8, 0xE5, 0xC2, 0xDF, 0x8C, 0x91, 0xB6, 0xAB,
    0x10, 0x0D, 0x2A, 0x37, 0x64, 0x79, 0x5E, 0x43, 0xB2, 0xAF, 0x88, 0x95,
    0xC6, 0xDB, 0xFC, 0xE1, 0x5A, 0x47, 0x60, 0x7D, 0x2E, 0x33, 0x14, 0x09,
    0x7F, 0x62, 0x45, 0x58, 0x0B, 0x16, 0x31, 0x2C, 0x97, 0x8A, 0xAD, 0xB0,
    0xE3, 0xFE, 0xD9, 0xC4};
#endif
#ifdef CRC8_0x2F_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x2F --> x^8 + x^5 + x^3 + x^2 + x + 1
 */
static const uint8_t CRC8_0x2F_table[256] = {
    0x00, 0x2F, 0x5E, 0x71, 0xBC, 0x93, 0xE2, 0xCD, 0x57, 0x78, 0x09, 0x26,
    0xEB, 0xC4, 0xB5, 0x9A, 0xAE, 0x81, 0xF0, 0xDF, 0x12, 0x3D, 0x4C, 0x63,
    0xF9, 0xD6, 0xA7, 0x88, 0x45, 0x6A, 0x1B, 0x34, 0x73, 0x5C, 0x2D, 0x02,
    0xCF, 0xE0, 0x91, 0xBE, 0x24, 0x0B, 0x7A, 0x55, 0x98, 0xB7, 0xC6, 0xE9,
    0xDD, 0xF2, 0x83, 0xAC, 0x61, 0x4E, 0x3F, 0x10, 0x8A, 0xA5, 0xD4, 0xFB,
    0x36, 0x19, 0x68, 0x47, 0xE6, 0xC9, 0xB8, 0x97, 0x5A, 0x75, 0x04, 0x2B,
    0xB1, 0x9E, 0xEF, 0xC0, 0x0D, 0x22, 0x53, 0x7C, 0x48, 0x67, 0x16, 0x39,
    0xF4, 0xDB, 0xAA, 0x85, 0x1F, 0x30, 0x41, 0x6E, 0xA3, 0x8C, 0xFD, 0xD2,
    0x95, 0xBA, 0xCB, 0xE4, 0x29, 0x06, 0x77, 0x58, 0xC2, 0xED, 0x9C, 0xB3,
    0x7E, 0x51, 0x20, 0x0F, 0x3B, 0x14, 0x65, 0x4A, 0x87, 0xA8, 0xD9, 0xF6,
    0x6C, 0x43, 0x32, 0x1D, 0xD0, 0xFF, 0x8E, 0xA1, 0xE3, 0xCC, 0xBD, 0x92,
    0x5F, 0x70, 0x01, 0x2E, 0xB4, 0x9B, 0xEA, 0xC5, 0x08, 0x27, 0x56, 0x79,
    0x4D, 0x62, 0x13, 0x3C, 0xF1, 0xDE, 0xAF, 0x80, 0x1A, 0x35, 0x44, 0x6B,
    0xA6, 0x89, 0xF8, 0xD7, 0x90, 0xBF, 0xCE, 0xE1, 0x2C, 0x03, 0x72, 0x5D,
    0xC7, 0xE8, 0x99, 0xB6, 0x7B, 0x54, 0x25, 0x0A, 0x3E, 0x11, 0x60, 0x4F,
    0x82, 0xAD, 0xDC, 0xF3, 0x69, 0x46, 0x37, 0x18, 0xD5, 0xFA, 0x8B, 0xA4,
    0x05, 0x2A, 0x5B, 0x74, 0xB9, 0x96, 0xE7, 0xC8, 0x52, 0x7D, 0x0C, 0x23,
    0xEE, 0xC1, 0xB0, 0x9F, 0xAB, 0x84, 0xF5, 0xDA, 0x17, 0x38, 0x49, 0x66,
    0xFC, 0xD3, 0xA2, 0x8D, 0x40, 0x6F, 0x1E, 0x31, 0x76, 0x59, 0x28, 0x07,
    0xCA, 0xE5, 0x94, 0xBB, 0x21, 0x0E, 0x7F, 0x50, 0x9D, 0xB2, 0xC3, 0xEC,
    0xD8, 0xF7, 0x86, 0xA9, 0x64, 0x4B, 0x3A, 0x15, 0x8F, 0xA0, 0xD1, 0xFE,
    0x33, 0x1C, 0x6D, 0x42};
#endif

#ifdef CRC8_0xA7_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0xA7 --> x^8 + x^7 + x^4 + x^3 + x^2 + 1
 */
static const uint8_t CRC8_0xA7_table[256] = {
    0x00, 0xA7, 0xE9, 0x4E, 0x75, 0xD2, 0x9C, 0x3B, 0xEA, 0x4D, 0x03, 0xA4,
    0x9F, 0x38, 0x76, 0xD1, 0x73, 0xD4, 0x9A, 0x3D, 0x06, 0xA1, 0xEF, 0x48,
    0x99, 0x3E, 0x70, 0xD7, 0xEC, 0x4B, 0x05, 0xA2, 0xE6, 0x41, 0x0F, 0xA8,
    0x93, 0x34, 0x7A, 0xDD, 0x0C, 0xAB, 0xE5, 0x42, 0x79, 0xDE, 0x90, 0x37,
    0x95, 0x32, 0x7C, 0xDB, 0xE0, 0x47, 0x09, 0xAE, 0x7F, 0xD8, 0x96, 0x31,
    0x0A, 0xAD, 0xE3, 0x44, 0x6B, 0xCC, 0x82, 0x25, 0x1E, 0xB9, 0xF7, 0x50,
    0x81, 0x26, 0x68, 0xCF, 0xF4, 0x53, 0x1D, 0xBA, 0x18, 0xBF, 0xF1, 0x56,
    0x6D, 0xCA, 0x84, 0x23, 0xF2, 0x55, 0x1B, 0xBC, 0x87, 0x20, 0x6E, 0xC9,
    0x8D, 0x2A, 0x64, 0xC3, 0xF8, 0x5F, 0x11, 0xB6, 0x67, 0xC0, 0x8E, 0x29,
    0x12, 0xB5, 0xFB, 0x5C, 0xFE, 0x59, 0x17, 0xB0, 0x8B, 0x2C, 0x62, 0xC5,
    0x14, 0xB3, 0xFD, 0x5A, 0x61, 0xC6, 0x88, 0x2F, 0xD6, 0x71, 0x3F, 0x98,
    0xA3, 0x04, 0x4A, 0xED, 0x3C, 0x9B, 0xD5, 0x72, 0x49, 0xEE, 0xA0, 0x07,
    0xA5, 0x02, 0x4C, 0xEB, 0xD0, 0x77, 0x39, 0x9E, 0x4F, 0xE8, 0xA6, 0x01,
    0x3A, 0x9D, 0xD3, 0x74, 0x30, 0x97, 0xD9, 0x7E, 0x45, 0xE2, 0xAC, 0x0B,
    0xDA, 0x7D, 0x33, 0x94, 0xAF, 0x08, 0x46, 0xE1, 0x43, 0xE4, 0xAA, 0x0D,
    0x36, 0x91, 0xDF, 0x78, 0xA9, 0x0E, 0x40, 0xE7, 0xDC, 0x7B, 0x35, 0x92,
    0xBD, 0x1A, 0x54, 0xF3, 0xC8, 0x6F, 0x21, 0x86, 0x57, 0xF0, 0xBE, 0x19,
    0x22, 0x85, 0xCB, 0x6C, 0xCE, 0x69, 0x27, 0x80, 0xBB, 0x1C, 0x52, 0xF5,
    0x24, 0x83, 0xCD, 0x6A, 0x51, 0xF6, 0xB8, 0x1F, 0x5B, 0xFC, 0xB2, 0x15,
    0x2E, 0x89, 0xC7, 0x60, 0xB1, 0x16, 0x58, 0xFF, 0xC4, 0x63, 0x2D, 0x8A,
    0x28, 0x8F, 0xC1, 0x66, 0x5D, 0xFA, 0xB4, 0x13, 0xC2, 0x65, 0x2B, 0x8C,
    0xB7, 0x10, 0x5E, 0xF9,
};
#endif

#ifdef CRC8_0x31_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x31 --> x^8 + x^5 + x^4 + 1
 */
static const uint8_t CRC8_0x31_table[256] = {
    0x00, 0x31, 0x62, 0x53, 0xC4, 0xF5, 0xA6, 0x97, 0xB9, 0x88, 0xDB, 0xEA,
    0x7D, 0x4C, 0x1F, 0x2E, 0x43, 0x72, 0x21, 0x10, 0x87, 0xB6, 0xE5, 0xD4,
    0xFA, 0xCB, 0x98, 0xA9, 0x3E, 0x0F, 0x5C, 0x6D, 0x86, 0xB7, 0xE4, 0xD5,
    0x42, 0x73, 0x20, 0x11, 0x3F, 0x0E, 0x5D, 0x6C, 0xFB, 0xCA, 0x99, 0xA8,
    0xC5, 0xF4, 0xA7, 0x96, 0x01, 0x30, 0x63, 0x52, 0x7C, 0x4D, 0x1E, 0x2F,
    0xB8, 0x89, 0xDA, 0xEB, 0x3D, 0x0C, 0x5F, 0x6E, 0xF9, 0xC8, 0x9B, 0xAA,
    0x84, 0xB5, 0xE6, 0xD7, 0x40, 0x71, 0x22, 0x13, 0x7E, 0x4F, 0x1C, 0x2D,
    0xBA, 0x8B, 0xD8, 0xE9, 0xC7, 0xF6, 0xA5, 0x94, 0x03, 0x32, 0x61, 0x50,
    0xBB, 0x8A, 0xD9, 0xE8, 0x7F, 0x4E, 0x1D, 0x2C, 0x02, 0x33, 0x60, 0x51,
    0xC6, 0xF7, 0xA4, 0x95, 0xF8, 0xC9, 0x9A, 0xAB, 0x3C, 0x0D, 0x5E, 0x6F,
    0x41, 0x70, 0x23, 0x12, 0x85, 0xB4, 0xE7, 0xD6, 0x7A, 0x4B, 0x18, 0x29,
    0xBE, 0x8F, 0xDC, 0xED, 0xC3, 0xF2, 0xA1, 0x90, 0x07, 0x36, 0x65, 0x54,
    0x39, 0x08, 0x5B, 0x6A, 0xFD, 0xCC, 0x9F, 0xAE, 0x80, 0xB1, 0xE2, 0xD3,
    0x44, 0x75, 0x26, 0x17, 0xFC, 0xCD, 0x9E, 0xAF, 0x38, 0x09, 0x5A, 0x6B,
    0x45, 0x74, 0x27, 0x16, 0x81, 0xB0, 0xE3, 0xD2, 0xBF, 0x8E, 0xDD, 0xEC,
    0x7B, 0x4A, 0x19, 0x28, 0x06, 0x37, 0x64, 0x55, 0xC2, 0xF3, 0xA0, 0x91,
    0x47, 0x76, 0x25, 0x14, 0x83, 0xB2, 0xE1, 0xD0, 0xFE, 0xCF, 0x9C, 0xAD,
    0x3A, 0x0B, 0x58, 0x69, 0x04, 0x35, 0x66, 0x57, 0xC0, 0xF1, 0xA2, 0x93,
    0xBD, 0x8C, 0xDF, 0xEE, 0x79, 0x48, 0x1B, 0x2A, 0xC1, 0xF0, 0xA3, 0x92,
    0x05, 0x34, 0x67, 0x56, 0x78, 0x49, 0x1A, 0x2B, 0xBC, 0x8D, 0xDE, 0xEF,
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15, 0x3B, 0x0A, 0x59, 0x68,
    0xFF, 0xCE, 0x9D, 0xAC};
#endif
#ifdef CRC8_0x39_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x39 --> x^8 + x^5 + x^4 + x^3 + 1
 */
static const uint8_t CRC8_0x39_table[256] = {
    0x00, 0x39, 0x72, 0x4B, 0xE4, 0xDD, 0x96, 0xAF, 0xF1, 0xC8, 0x83, 0xBA,
    0x15, 0x2C, 0x67, 0x5E, 0xDB, 0xE2, 0xA9, 0x90, 0x3F, 0x06, 0x4D, 0x74,
    0x2A, 0x13, 0x58, 0x61, 0xCE, 0xF7, 0xBC, 0x85, 0x8F, 0xB6, 0xFD, 0xC4,
    0x6B, 0x52, 0x19, 0x20, 0x7E, 0x47, 0x0C, 0x35, 0x9A, 0xA3, 0xE8, 0xD1,
    0x54, 0x6D, 0x26, 0x1F, 0xB0, 0x89, 0xC2, 0xFB, 0xA5, 0x9C, 0xD7, 0xEE,
    0x41, 0x78, 0x33, 0x0A, 0x27, 0x1E, 0x55, 0x6C, 0xC3, 0xFA, 0xB1, 0x88,
    0xD6, 0xEF, 0xA4, 0x9D, 0x32, 0x0B, 0x40, 0x79, 0xFC, 0xC5, 0x8E, 0xB7,
    0x18, 0x21, 0x6A, 0x53, 0x0D, 0x34, 0x7F, 0x46, 0xE9, 0xD0, 0x9B, 0xA2,
    0xA8, 0x91, 0xDA, 0xE3, 0x4C, 0x75, 0x3E, 0x07, 0x59, 0x60, 0x2B, 0x12,
    0xBD, 0x84, 0xCF, 0xF6, 0x73, 0x4A, 0x01, 0x38, 0x97, 0xAE, 0xE5, 0xDC,
    0x82, 0xBB, 0xF0, 0xC9, 0x66, 0x5F, 0x14, 0x2D, 0x4E, 0x77, 0x3C, 0x05,
    0xAA, 0x93, 0xD8, 0xE1, 0xBF, 0x86, 0xCD, 0xF4, 0x5B, 0x62, 0x29, 0x10,
    0x95, 0xAC, 0xE7, 0xDE, 0x71, 0x48, 0x03, 0x3A, 0x64, 0x5D, 0x16, 0x2F,
    0x80, 0xB9, 0xF2, 0xCB, 0xC1, 0xF8, 0xB3, 0x8A, 0x25, 0x1C, 0x57, 0x6E,
    0x30, 0x09, 0x42, 0x7B, 0xD4, 0xED, 0xA6, 0x9F, 0x1A, 0x23, 0x68, 0x51,
    0xFE, 0xC7, 0x8C, 0xB5, 0xEB, 0xD2, 0x99, 0xA0, 0x0F, 0x36, 0x7D, 0x44,
    0x69, 0x50, 0x1B, 0x22, 0x8D, 0xB4, 0xFF, 0xC6, 0x98, 0xA1, 0xEA, 0xD3,
    0x7C, 0x45, 0x0E, 0x37, 0xB2, 0x8B, 0xC0, 0xF9, 0x56, 0x6F, 0x24, 0x1D,
    0x43, 0x7A, 0x31, 0x08, 0xA7, 0x9E, 0xD5, 0xEC, 0xE6, 0xDF, 0x94, 0xAD,
    0x02, 0x3B, 0x70, 0x49, 0x17, 0x2E, 0x65, 0x5C, 0xF3, 0xCA, 0x81, 0xB8,
    0x3D, 0x04, 0x4F, 0x76, 0xD9, 0xE0, 0xAB, 0x92, 0xCC, 0xF5, 0xBE, 0x87,
    0x28, 0x11, 0x5A, 0x63};
#endif
#ifdef CRC8_0x9B_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x9B --> x^8 + x^7 + x^4 + x^3 + x + 1
 */
static const uint8_t CRC8_0x9B_table[256] = {
    0x00, 0x9B, 0xAD, 0x36, 0xC1, 0x5A, 0x6C, 0xF7, 0x19, 0x82, 0xB4, 0x2F,
    0xD8, 0x43, 0x75, 0xEE, 0x32, 0xA9, 0x9F, 0x04, 0xF3, 0x68, 0x5E, 0xC5,
    0x2B, 0xB0, 0x86, 0x1D, 0xEA, 0x71, 0x47, 0xDC, 0x64, 0xFF, 0xC9, 0x52,
    0xA5, 0x3E, 0x08, 0x93, 0x7D, 0xE6, 0xD0, 0x4B, 0xBC, 0x27, 0x11, 0x8A,
    0x56, 0xCD, 0xFB, 0x60, 0x97, 0x0C, 0x3A, 0xA1, 0x4F, 0xD4, 0xE2, 0x79,
    0x8E, 0x15, 0x23, 0xB8, 0xC8, 0x53, 0x65, 0xFE, 0x09, 0x92, 0xA4, 0x3F,
    0xD1, 0x4A, 0x7C, 0xE7, 0x10, 0x8B, 0xBD, 0x26, 0xFA, 0x61, 0x57, 0xCC,
    0x3B, 0xA0, 0x96, 0x0D, 0xE3, 0x78, 0x4E, 0xD5, 0x22, 0xB9, 0x8F, 0x14,
    0xAC, 0x37, 0x01, 0x9A, 0x6D, 0xF6, 0xC0, 0x5B, 0xB5, 0x2E, 0x18, 0x83,
    0x74, 0xEF, 0xD9, 0x42, 0x9E, 0x05, 0x33, 0xA8, 0x5F, 0xC4, 0xF2, 0x69,
    0x87, 0x1C, 0x2A, 0xB1, 0x46, 0xDD, 0xEB, 0x70, 0x0B, 0x90, 0xA6, 0x3D,
    0xCA, 0x51, 0x67, 0xFC, 0x12, 0x89, 0xBF, 0x24, 0xD3, 0x48, 0x7E, 0xE5,
    0x39, 0xA2, 0x94, 0x0F, 0xF8, 0x63, 0x55, 0xCE, 0x20, 0xBB, 0x8D, 0x16,
    0xE1, 0x7A, 0x4C, 0xD7, 0x6F, 0xF4, 0xC2, 0x59, 0xAE, 0x35, 0x03, 0x98,
    0x76, 0xED, 0xDB, 0x40, 0xB7, 0x2C, 0x1A, 0x81, 0x5D, 0xC6, 0xF0, 0x6B,
    0x9C, 0x07, 0x31, 0xAA, 0x44, 0xDF, 0xE9, 0x72, 0x85, 0x1E, 0x28, 0xB3,
    0xC3, 0x58, 0x6E, 0xF5, 0x02, 0x99, 0xAF, 0x34, 0xDA, 0x41, 0x77, 0xEC,
    0x1B, 0x80, 0xB6, 0x2D, 0xF1, 0x6A, 0x5C, 0xC7, 0x30, 0xAB, 0x9D, 0x06,
    0xE8, 0x73, 0x45, 0xDE, 0x29, 0xB2, 0x84, 0x1F, 0xA7, 0x3C, 0x0A, 0x91,
    0x66, 0xFD, 0xCB, 0x50, 0xBE, 0x25, 0x13, 0x88, 0x7F, 0xE4, 0xD2, 0x49,
    0x95, 0x0E, 0x38, 0xA3, 0x54, 0xCF, 0xF9, 0x62, 0x8C, 0x17, 0x21, 0xBA,
    0x4D, 0xD6, 0xE0, 0x7B};
#endif
#ifdef CRC8_0xD5_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0xD5 --> x^8 + x^7 + x^6 + x^4 + x^2 + 1
 */
static const uint8_t CRC8_0xD5_table[256] = {
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83,
    0xD7, 0x02, 0xA8, 0x7D, 0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06,
    0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F, 0xA4, 0x71, 0xDB, 0x0E,
    0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75,
    0x21, 0xF4, 0x5E, 0x8B, 0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9,
    0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0, 0xCF, 0x1A, 0xB0, 0x65,
    0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA,
    0xEE, 0x3B, 0x91, 0x44, 0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F,
    0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16, 0xEF, 0x3A, 0x90, 0x45,
    0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
    0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E,
    0x6A, 0xBF, 0x15, 0xC0, 0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F,
    0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36, 0x19, 0xCC, 0x66, 0xB3,
    0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
    0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1,
    0xA5, 0x70, 0xDA, 0x0F, 0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74,
    0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D, 0xD6, 0x03, 0xA9, 0x7C,
    0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07,
    0x53, 0x86, 0x2C, 0xF9};
#endif

#ifdef CRC8_0x49_LOOKUP_TABLE
static const uint8_t CRC8_0x49_table[256] = {
    0x00, 0x49, 0x92, 0xDB, 0x6D, 0x24, 0xFF, 0xB6, 0xDA, 0x93, 0x48, 0x01,
    0xB7, 0xFE, 0x25, 0x6C, 0xFD, 0xB4, 0x6F, 0x26, 0x90, 0xD9, 0x02, 0x4B,
    0x27, 0x6E, 0xB5, 0xFC, 0x4A, 0x03, 0xD8, 0x91, 0xB3, 0xFA, 0x21, 0x68,
    0xDE, 0x97, 0x4C, 0x05, 0x69, 0x20, 0xFB, 0xB2, 0x04, 0x4D, 0x96, 0xDF,
    0x4E, 0x07, 0xDC, 0x95, 0x23, 0x6A, 0xB1, 0xF8, 0x94, 0xDD, 0x06, 0x4F,
    0xF9, 0xB0, 0x6B, 0x22, 0x2F, 0x66, 0xBD, 0xF4, 0x42, 0x0B, 0xD0, 0x99,
    0xF5, 0xBC, 0x67, 0x2E, 0x98, 0xD1, 0x0A, 0x43, 0xD2, 0x9B, 0x40, 0x09,
    0xBF, 0xF6, 0x2D, 0x64, 0x08, 0x41, 0x9A, 0xD3, 0x65, 0x2C, 0xF7, 0xBE,
    0x9C, 0xD5, 0x0E, 0x47, 0xF1, 0xB8, 0x63, 0x2A, 0x46, 0x0F, 0xD4, 0x9D,
    0x2B, 0x62, 0xB9, 0xF0, 0x61, 0x28, 0xF3, 0xBA, 0x0C, 0x45, 0x9E, 0xD7,
    0xBB, 0xF2, 0x29, 0x60, 0xD6, 0x9F, 0x44, 0x0D, 0x5E, 0x17, 0xCC, 0x85,
    0x33, 0x7A, 0xA1, 0xE8, 0x84, 0xCD, 0x16, 0x5F, 0xE9, 0xA0, 0x7B, 0x32,
    0xA3, 0xEA, 0x31, 0x78, 0xCE, 0x87, 0x5C, 0x15, 0x79, 0x30, 0xEB, 0xA2,
    0x14, 0x5D, 0x86, 0xCF, 0xED, 0xA4, 0x7F, 0x36, 0x80, 0xC9, 0x12, 0x5B,
    0x37, 0x7E, 0xA5, 0xEC, 0x5A, 0x13, 0xC8, 0x81, 0x10, 0x59, 0x82, 0xCB,
    0x7D, 0x34, 0xEF, 0xA6, 0xCA, 0x83, 0x58, 0x11, 0xA7, 0xEE, 0x35, 0x7C,
    0x71, 0x38, 0xE3, 0xAA, 0x1C, 0x55, 0x8E, 0xC7, 0xAB, 0xE2, 0x39, 0x70,
    0xC6, 0x8F, 0x54, 0x1D, 0x8C, 0xC5, 0x1E, 0x57, 0xE1, 0xA8, 0x73, 0x3A,
    0x56, 0x1F, 0xC4, 0x8D, 0x3B, 0x72, 0xA9, 0xE0, 0xC2, 0x8B, 0x50, 0x19,
    0xAF, 0xE6, 0x3D, 0x74, 0x18, 0x51, 0x8A, 0xC3, 0x75, 0x3C, 0xE7, 0xAE,
    0x3F, 0x76, 0xAD, 0xE4, 0x52, 0x1B, 0xC0, 0x89, 0xE5, 0xAC, 0x77, 0x3E,
    0x88, 0xC1, 0x1A, 0x53};
#endif

#ifdef CRC16_0x1021_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x1021 --> x^16 + x^12 + x^5 + 1
 */
static const uint16_t CRC16_0x1021_table[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7, 0x8108,
    0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF, 0x1231, 0x0210,
    0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6, 0x9339, 0x8318, 0xB37B,
    0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE, 0x2462, 0x3443, 0x0420, 0x1401,
    0x64E6, 0x74C7, 0x44A4, 0x5485, 0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE,
    0xF5CF, 0xC5AC, 0xD58D, 0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6,
    0x5695, 0x46B4, 0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D,
    0xC7BC, 0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B, 0x5AF5,
    0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12, 0xDBFD, 0xCBDC,
    0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A, 0x6CA6, 0x7C87, 0x4CE4,
    0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41, 0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD,
    0xAD2A, 0xBD0B, 0x8D68, 0x9D49, 0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13,
    0x2E32, 0x1E51, 0x0E70, 0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A,
    0x9F59, 0x8F78, 0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E,
    0xE16F, 0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E, 0x02B1,
    0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256, 0xB5EA, 0xA5CB,
    0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D, 0x34E2, 0x24C3, 0x14A0,
    0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xA7DB, 0xB7FA, 0x8799, 0x97B8,
    0xE75F, 0xF77E, 0xC71D, 0xD73C, 0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657,
    0x7676, 0x4615, 0x5634, 0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9,
    0xB98A, 0xA9AB, 0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882,
    0x28A3, 0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92, 0xFD2E,
    0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9, 0x7C26, 0x6C07,
    0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1, 0xEF1F, 0xFF3E, 0xCF5D,
    0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8, 0x6E17, 0x7E36, 0x4E55, 0x5E74,
    0x2E93, 0x3EB2, 0x0ED1, 0x1EF0};
#endif
#ifdef CRC16_0x8005_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x8005 --> x^16 + x^15 + x^2 + 1
 */
static const uint16_t CRC16_0x8005_table[256] = {
    0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011, 0x8033,
    0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022, 0x8063, 0x0066,
    0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072, 0x0050, 0x8055, 0x805F,
    0x005A, 0x804B, 0x004E, 0x0044, 0x8041, 0x80C3, 0x00C6, 0x00CC, 0x80C9,
    0x00D8, 0x80DD, 0x80D7, 0x00D2, 0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB,
    0x00EE, 0x00E4, 0x80E1, 0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE,
    0x00B4, 0x80B1, 0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087,
    0x0082, 0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
    0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1, 0x01E0,
    0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1, 0x81D3, 0x01D6,
    0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2, 0x0140, 0x8145, 0x814F,
    0x014A, 0x815B, 0x015E, 0x0154, 0x8151, 0x8173, 0x0176, 0x017C, 0x8179,
    0x0168, 0x816D, 0x8167, 0x0162, 0x8123, 0x0126, 0x012C, 0x8129, 0x0138,
    0x813D, 0x8137, 0x0132, 0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E,
    0x0104, 0x8101, 0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317,
    0x0312, 0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
    0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371, 0x8353,
    0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342, 0x03C0, 0x83C5,
    0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1, 0x83F3, 0x03F6, 0x03FC,
    0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2, 0x83A3, 0x03A6, 0x03AC, 0x83A9,
    0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B,
    0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E,
    0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7,
    0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
    0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243,
    0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270, 0x8275,
    0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F,
    0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219,
    0x0208, 0x820D, 0x8207, 0x0202};
#endif
#ifdef CRC16_0x0589_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x0589 --> x^16 + x^10 + x^8 + x^7 + x^3 + 1
 */
static const uint16_t CRC16_0x0589_table[256] = {
    0x0000, 0x0589, 0x0B12, 0x0E9B, 0x1624, 0x13AD, 0x1D36, 0x18BF, 0x2C48,
    0x29C1, 0x275A, 0x22D3, 0x3A6C, 0x3FE5, 0x317E, 0x34F7, 0x5890, 0x5D19,
    0x5382, 0x560B, 0x4EB4, 0x4B3D, 0x45A6, 0x402F, 0x74D8, 0x7151, 0x7FCA,
    0x7A43, 0x62FC, 0x6775, 0x69EE, 0x6C67, 0xB120, 0xB4A9, 0xBA32, 0xBFBB,
    0xA704, 0xA28D, 0xAC16, 0xA99F, 0x9D68, 0x98E1, 0x967A, 0x93F3, 0x8B4C,
    0x8EC5, 0x805E, 0x85D7, 0xE9B0, 0xEC39, 0xE2A2, 0xE72B, 0xFF94, 0xFA1D,
    0xF486, 0xF10F, 0xC5F8, 0xC071, 0xCEEA, 0xCB63, 0xD3DC, 0xD655, 0xD8CE,
    0xDD47, 0x67C9, 0x6240, 0x6CDB, 0x6952, 0x71ED, 0x7464, 0x7AFF, 0x7F76,
    0x4B81, 0x4E08, 0x4093, 0x451A, 0x5DA5, 0x582C, 0x56B7, 0x533E, 0x3F59,
    0x3AD0, 0x344B, 0x31C2, 0x297D, 0x2CF4, 0x226F, 0x27E6, 0x1311, 0x1698,
    0x1803, 0x1D8A, 0x0535, 0x00BC, 0x0E27, 0x0BAE, 0xD6E9, 0xD360, 0xDDFB,
    0xD872, 0xC0CD, 0xC544, 0xCBDF, 0xCE56, 0xFAA1, 0xFF28, 0xF1B3, 0xF43A,
    0xEC85, 0xE90C, 0xE797, 0xE21E, 0x8E79, 0x8BF0, 0x856B, 0x80E2, 0x985D,
    0x9DD4, 0x934F, 0x96C6, 0xA231, 0xA7B8, 0xA923, 0xACAA, 0xB415, 0xB19C,
    0xBF07, 0xBA8E, 0xCF92, 0xCA1B, 0xC480, 0xC109, 0xD9B6, 0xDC3F, 0xD2A4,
    0xD72D, 0xE3DA, 0xE653, 0xE8C8, 0xED41, 0xF5FE, 0xF077, 0xFEEC, 0xFB65,
    0x9702, 0x928B, 0x9C10, 0x9999, 0x8126, 0x84AF, 0x8A34, 0x8FBD, 0xBB4A,
    0xBEC3, 0xB058, 0xB5D1, 0xAD6E, 0xA8E7, 0xA67C, 0xA3F5, 0x7EB2, 0x7B3B,
    0x75A0, 0x7029, 0x6896, 0x6D1F, 0x6384, 0x660D, 0x52FA, 0x5773, 0x59E8,
    0x5C61, 0x44DE, 0x4157, 0x4FCC, 0x4A45, 0x2622, 0x23AB, 0x2D30, 0x28B9,
    0x3006, 0x358F, 0x3B14, 0x3E9D, 0x0A6A, 0x0FE3, 0x0178, 0x04F1, 0x1C4E,
    0x19C7, 0x175C, 0x12D5, 0xA85B, 0xADD2, 0xA349, 0xA6C0, 0xBE7F, 0xBBF6,
    0xB56D, 0xB0E4, 0x8413, 0x819A, 0x8F01, 0x8A88, 0x9237, 0x97BE, 0x9925,
    0x9CAC, 0xF0CB, 0xF542, 0xFBD9, 0xFE50, 0xE6EF, 0xE366, 0xEDFD, 0xE874,
    0xDC83, 0xD90A, 0xD791, 0xD218, 0xCAA7, 0xCF2E, 0xC1B5, 0xC43C, 0x197B,
    0x1CF2, 0x1269, 0x17E0, 0x0F5F, 0x0AD6, 0x044D, 0x01C4, 0x3533, 0x30BA,
    0x3E21, 0x3BA8, 0x2317, 0x269E, 0x2805, 0x2D8C, 0x41EB, 0x4462, 0x4AF9,
    0x4F70, 0x57CF, 0x5246, 0x5CDD, 0x5954, 0x6DA3, 0x682A, 0x66B1, 0x6338,
    0x7B87, 0x7E0E, 0x7095, 0x751C};
#endif
#ifdef CRC16_0x3D65_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x3D65 --> x^16 + x^13 + x^12 + x^11 + x^10 + x^8
 * + x^6 + x^5 + x^2 + 1
 */
static const uint16_t CRC16_0x3D65_table[256] = {
    0x0000, 0x3D65, 0x7ACA, 0x47AF, 0xF594, 0xC8F1, 0x8F5E, 0xB23B, 0xD64D,
    0xEB28, 0xAC87, 0x91E2, 0x23D9, 0x1EBC, 0x5913, 0x6476, 0x91FF, 0xAC9A,
    0xEB35, 0xD650, 0x646B, 0x590E, 0x1EA1, 0x23C4, 0x47B2, 0x7AD7, 0x3D78,
    0x001D, 0xB226, 0x8F43, 0xC8EC, 0xF589, 0x1E9B, 0x23FE, 0x6451, 0x5934,
    0xEB0F, 0xD66A, 0x91C5, 0xACA0, 0xC8D6, 0xF5B3, 0xB21C, 0x8F79, 0x3D42,
    0x0027, 0x4788, 0x7AED, 0x8F64, 0xB201, 0xF5AE, 0xC8CB, 0x7AF0, 0x4795,
    0x003A, 0x3D5F, 0x5929, 0x644C, 0x23E3, 0x1E86, 0xACBD, 0x91D8, 0xD677,
    0xEB12, 0x3D36, 0x0053, 0x47FC, 0x7A99, 0xC8A2, 0xF5C7, 0xB268, 0x8F0D,
    0xEB7B, 0xD61E, 0x91B1, 0xACD4, 0x1EEF, 0x238A, 0x6425, 0x5940, 0xACC9,
    0x91AC, 0xD603, 0xEB66, 0x595D, 0x6438, 0x2397, 0x1EF2, 0x7A84, 0x47E1,
    0x004E, 0x3D2B, 0x8F10, 0xB275, 0xF5DA, 0xC8BF, 0x23AD, 0x1EC8, 0x5967,
    0x6402, 0xD639, 0xEB5C, 0xACF3, 0x9196, 0xF5E0, 0xC885, 0x8F2A, 0xB24F,
    0x0074, 0x3D11, 0x7ABE, 0x47DB, 0xB252, 0x8F37, 0xC898, 0xF5FD, 0x47C6,
    0x7AA3, 0x3D0C, 0x0069, 0x641F, 0x597A, 0x1ED5, 0x23B0, 0x918B, 0xACEE,
    0xEB41, 0xD624, 0x7A6C, 0x4709, 0x00A6, 0x3DC3, 0x8FF8, 0xB29D, 0xF532,
    0xC857, 0xAC21, 0x9144, 0xD6EB, 0xEB8E, 0x59B5, 0x64D0, 0x237F, 0x1E1A,
    0xEB93, 0xD6F6, 0x9159, 0xAC3C, 0x1E07, 0x2362, 0x64CD, 0x59A8, 0x3DDE,
    0x00BB, 0x4714, 0x7A71, 0xC84A, 0xF52F, 0xB280, 0x8FE5, 0x64F7, 0x5992,
    0x1E3D, 0x2358, 0x9163, 0xAC06, 0xEBA9, 0xD6CC, 0xB2BA, 0x8FDF, 0xC870,
    0xF515, 0x472E, 0x7A4B, 0x3DE4, 0x0081, 0xF508, 0xC86D, 0x8FC2, 0xB2A7,
    0x009C, 0x3DF9, 0x7A56, 0x4733, 0x2345, 0x1E20, 0x598F, 0x64EA, 0xD6D1,
    0xEBB4, 0xAC1B, 0x917E, 0x475A, 0x7A3F, 0x3D90, 0x00F5, 0xB2CE, 0x8FAB,
    0xC804, 0xF561, 0x9117, 0xAC72, 0xEBDD, 0xD6B8, 0x6483, 0x59E6, 0x1E49,
    0x232C, 0xD6A5, 0xEBC0, 0xAC6F, 0x910A, 0x2331, 0x1E54, 0x59FB, 0x649E,
    0x00E8, 0x3D8D, 0x7A22, 0x4747, 0xF57C, 0xC819, 0x8FB6, 0xB2D3, 0x59C1,
    0x64A4, 0x230B, 0x1E6E, 0xAC55, 0x9130, 0xD69F, 0xEBFA, 0x8F8C, 0xB2E9,
    0xF546, 0xC823, 0x7A18, 0x477D, 0x00D2, 0x3DB7, 0xC83E, 0xF55B, 0xB2F4,
    0x8F91, 0x3DAA, 0x00CF, 0x4760, 0x7A05, 0x1E73, 0x2316, 0x64B9, 0x59DC,
    0xEBE7, 0xD682, 0x912D, 0xAC48};
#endif
#ifdef CRC16_0x8BB7_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x8BB7 --> x^16 + x^15 + x^11 + x^9 + x^8 + x^7 +
 * x^5 + x^4 + x^2 + x + 1
 */
static const uint16_t CRC16_0x8BB7_table[256] = {
    0x0000, 0x8BB7, 0x9CD9, 0x176E, 0xB205, 0x39B2, 0x2EDC, 0xA56B, 0xEFBD,
    0x640A, 0x7364, 0xF8D3, 0x5DB8, 0xD60F, 0xC161, 0x4AD6, 0x54CD, 0xDF7A,
    0xC814, 0x43A3, 0xE6C8, 0x6D7F, 0x7A11, 0xF1A6, 0xBB70, 0x30C7, 0x27A9,
    0xAC1E, 0x0975, 0x82C2, 0x95AC, 0x1E1B, 0xA99A, 0x222D, 0x3543, 0xBEF4,
    0x1B9F, 0x9028, 0x8746, 0x0CF1, 0x4627, 0xCD90, 0xDAFE, 0x5149, 0xF422,
    0x7F95, 0x68FB, 0xE34C, 0xFD57, 0x76E0, 0x618E, 0xEA39, 0x4F52, 0xC4E5,
    0xD38B, 0x583C, 0x12EA, 0x995D, 0x8E33, 0x0584, 0xA0EF, 0x2B58, 0x3C36,
    0xB781, 0xD883, 0x5334, 0x445A, 0xCFED, 0x6A86, 0xE131, 0xF65F, 0x7DE8,
    0x373E, 0xBC89, 0xABE7, 0x2050, 0x853B, 0x0E8C, 0x19E2, 0x9255, 0x8C4E,
    0x07F9, 0x1097, 0x9B20, 0x3E4B, 0xB5FC, 0xA292, 0x2925, 0x63F3, 0xE844,
    0xFF2A, 0x749D, 0xD1F6, 0x5A41, 0x4D2F, 0xC698, 0x7119, 0xFAAE, 0xEDC0,
    0x6677, 0xC31C, 0x48AB, 0x5FC5, 0xD472, 0x9EA4, 0x1513, 0x027D, 0x89CA,
    0x2CA1, 0xA716, 0xB078, 0x3BCF, 0x25D4, 0xAE63, 0xB90D, 0x32BA, 0x97D1,
    0x1C66, 0x0B08, 0x80BF, 0xCA69, 0x41DE, 0x56B0, 0xDD07, 0x786C, 0xF3DB,
    0xE4B5, 0x6F02, 0x3AB1, 0xB106, 0xA668, 0x2DDF, 0x88B4, 0x0303, 0x146D,
    0x9FDA, 0xD50C, 0x5EBB, 0x49D5, 0xC262, 0x6709, 0xECBE, 0xFBD0, 0x7067,
    0x6E7C, 0xE5CB, 0xF2A5, 0x7912, 0xDC79, 0x57CE, 0x40A0, 0xCB17, 0x81C1,
    0x0A76, 0x1D18, 0x96AF, 0x33C4, 0xB873, 0xAF1D, 0x24AA, 0x932B, 0x189C,
    0x0FF2, 0x8445, 0x212E, 0xAA99, 0xBDF7, 0x3640, 0x7C96, 0xF721, 0xE04F,
    0x6BF8, 0xCE93, 0x4524, 0x524A, 0xD9FD, 0xC7E6, 0x4C51, 0x5B3F, 0xD088,
    0x75E3, 0xFE54, 0xE93A, 0x628D, 0x285B, 0xA3EC, 0xB482, 0x3F35, 0x9A5E,
    0x11E9, 0x0687, 0x8D30, 0xE232, 0x6985, 0x7EEB, 0xF55C, 0x5037, 0xDB80,
    0xCCEE, 0x4759, 0x0D8F, 0x8638, 0x9156, 0x1AE1, 0xBF8A, 0x343D, 0x2353,
    0xA8E4, 0xB6FF, 0x3D48, 0x2A26, 0xA191, 0x04FA, 0x8F4D, 0x9823, 0x1394,
    0x5942, 0xD2F5, 0xC59B, 0x4E2C, 0xEB47, 0x60F0, 0x779E, 0xFC29, 0x4BA8,
    0xC01F, 0xD771, 0x5CC6, 0xF9AD, 0x721A, 0x6574, 0xEEC3, 0xA415, 0x2FA2,
    0x38CC, 0xB37B, 0x1610, 0x9DA7, 0x8AC9, 0x017E, 0x1F65, 0x94D2, 0x83BC,
    0x080B, 0xAD60, 0x26D7, 0x31B9, 0xBA0E, 0xF0D8, 0x7B6F, 0x6C01, 0xE7B6,
    0x42DD, 0xC96A, 0xDE04, 0x55B3};
#endif
#ifdef CRC16_0xA097_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0xA097 --> x^16 + x^15 + x^13 + x^7 + x^4 + x^2 +
 * x^1 + 1
 */
static const uint16_t CRC16_0xA097_table[256] = {
    0x0000, 0xA097, 0xE1B9, 0x412E, 0x63E5, 0xC372, 0x825C, 0x22CB, 0xC7CA,
    0x675D, 0x2673, 0x86E4, 0xA42F, 0x04B8, 0x4596, 0xE501, 0x2F03, 0x8F94,
    0xCEBA, 0x6E2D, 0x4CE6, 0xEC71, 0xAD5F, 0x0DC8, 0xE8C9, 0x485E, 0x0970,
    0xA9E7, 0x8B2C, 0x2BBB, 0x6A95, 0xCA02, 0x5E06, 0xFE91, 0xBFBF, 0x1F28,
    0x3DE3, 0x9D74, 0xDC5A, 0x7CCD, 0x99CC, 0x395B, 0x7875, 0xD8E2, 0xFA29,
    0x5ABE, 0x1B90, 0xBB07, 0x7105, 0xD192, 0x90BC, 0x302B, 0x12E0, 0xB277,
    0xF359, 0x53CE, 0xB6CF, 0x1658, 0x5776, 0xF7E1, 0xD52A, 0x75BD, 0x3493,
    0x9404, 0xBC0C, 0x1C9B, 0x5DB5, 0xFD22, 0xDFE9, 0x7F7E, 0x3E50, 0x9EC7,
    0x7BC6, 0xDB51, 0x9A7F, 0x3AE8, 0x1823, 0xB8B4, 0xF99A, 0x590D, 0x930F,
    0x3398, 0x72B6, 0xD221, 0xF0EA, 0x507D, 0x1153, 0xB1C4, 0x54C5, 0xF452,
    0xB57C, 0x15EB, 0x3720, 0x97B7, 0xD699, 0x760E, 0xE20A, 0x429D, 0x03B3,
    0xA324, 0x81EF, 0x2178, 0x6056, 0xC0C1, 0x25C0, 0x8557, 0xC479, 0x64EE,
    0x4625, 0xE6B2, 0xA79C, 0x070B, 0xCD09, 0x6D9E, 0x2CB0, 0x8C27, 0xAEEC,
    0x0E7B, 0x4F55, 0xEFC2, 0x0AC3, 0xAA54, 0xEB7A, 0x4BED, 0x6926, 0xC9B1,
    0x889F, 0x2808, 0xD88F, 0x7818, 0x3936, 0x99A1, 0xBB6A, 0x1BFD, 0x5AD3,
    0xFA44, 0x1F45, 0xBFD2, 0xFEFC, 0x5E6B, 0x7CA0, 0xDC37, 0x9D19, 0x3D8E,
    0xF78C, 0x571B, 0x1635, 0xB6A2, 0x9469, 0x34FE, 0x75D0, 0xD547, 0x3046,
    0x90D1, 0xD1FF, 0x7168, 0x53A3, 0xF334, 0xB21A, 0x128D, 0x8689, 0x261E,
    0x6730, 0xC7A7, 0xE56C, 0x45FB, 0x04D5, 0xA442, 0x4143, 0xE1D4, 0xA0FA,
    0x006D, 0x22A6, 0x8231, 0xC31F, 0x6388, 0xA98A, 0x091D, 0x4833, 0xE8A4,
    0xCA6F, 0x6AF8, 0x2BD6, 0x8B41, 0x6E40, 0xCED7, 0x8FF9, 0x2F6E, 0x0DA5,
    0xAD32, 0xEC1C, 0x4C8B, 0x6483, 0xC414, 0x853A, 0x25AD, 0x0766, 0xA7F1,
    0xE6DF, 0x4648, 0xA349, 0x03DE, 0x42F0, 0xE267, 0xC0AC, 0x603B, 0x2115,
    0x8182, 0x4B80, 0xEB17, 0xAA39, 0x0AAE, 0x2865, 0x88F2, 0xC9DC, 0x694B,
    0x8C4A, 0x2CDD, 0x6DF3, 0xCD64, 0xEFAF, 0x4F38, 0x0E16, 0xAE81, 0x3A85,
    0x9A12, 0xDB3C, 0x7BAB, 0x5960, 0xF9F7, 0xB8D9, 0x184E, 0xFD4F, 0x5DD8,
    0x1CF6, 0xBC61, 0x9EAA, 0x3E3D, 0x7F13, 0xDF84, 0x1586, 0xB511, 0xF43F,
    0x54A8, 0x7663, 0xD6F4, 0x97DA, 0x374D, 0xD24C, 0x72DB, 0x33F5, 0x9362,
    0xB1A9, 0x113E, 0x5010, 0xF087};
#endif
#ifdef CRC16_0xC867_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0xC867 --> x^16 + x^15 + x^14 + x^11 + x^6 + x^5
 * + x^2 + x^1 + 1
 */
static const uint16_t CRC16_0xC867_table[256] = {
    0x0000, 0xC867, 0x58A9, 0x90CE, 0xB152, 0x7935, 0xE9FB, 0x219C, 0xAAC3,
    0x62A4, 0xF26A, 0x3A0D, 0x1B91, 0xD3F6, 0x4338, 0x8B5F, 0x9DE1, 0x5586,
    0xC548, 0x0D2F, 0x2CB3, 0xE4D4, 0x741A, 0xBC7D, 0x3722, 0xFF45, 0x6F8B,
    0xA7EC, 0x8670, 0x4E17, 0xDED9, 0x16BE, 0xF3A5, 0x3BC2, 0xAB0C, 0x636B,
    0x42F7, 0x8A90, 0x1A5E, 0xD239, 0x5966, 0x9101, 0x01CF, 0xC9A8, 0xE834,
    0x2053, 0xB09D, 0x78FA, 0x6E44, 0xA623, 0x36ED, 0xFE8A, 0xDF16, 0x1771,
    0x87BF, 0x4FD8, 0xC487, 0x0CE0, 0x9C2E, 0x5449, 0x75D5, 0xBDB2, 0x2D7C,
    0xE51B, 0x2F2D, 0xE74A, 0x7784, 0xBFE3, 0x9E7F, 0x5618, 0xC6D6, 0x0EB1,
    0x85EE, 0x4D89, 0xDD47, 0x1520, 0x34BC, 0xFCDB, 0x6C15, 0xA472, 0xB2CC,
    0x7AAB, 0xEA65, 0x2202, 0x039E, 0xCBF9, 0x5B37, 0x9350, 0x180F, 0xD068,
    0x40A6, 0x88C1, 0xA95D, 0x613A, 0xF1F4, 0x3993, 0xDC88, 0x14EF, 0x8421,
    0x4C46, 0x6DDA, 0xA5BD, 0x3573, 0xFD14, 0x764B, 0xBE2C, 0x2EE2, 0xE685,
    0xC719, 0x0F7E, 0x9FB0, 0x57D7, 0x4169, 0x890E, 0x19C0, 0xD1A7, 0xF03B,
    0x385C, 0xA892, 0x60F5, 0xEBAA, 0x23CD, 0xB303, 0x7B64, 0x5AF8, 0x929F,
    0x0251, 0xCA36, 0x5E5A, 0x963D, 0x06F3, 0xCE94, 0xEF08, 0x276F, 0xB7A1,
    0x7FC6, 0xF499, 0x3CFE, 0xAC30, 0x6457, 0x45CB, 0x8DAC, 0x1D62, 0xD505,
    0xC3BB, 0x0BDC, 0x9B12, 0x5375, 0x72E9, 0xBA8E, 0x2A40, 0xE227, 0x6978,
    0xA11F, 0x31D1, 0xF9B6, 0xD82A, 0x104D, 0x8083, 0x48E4, 0xADFF, 0x6598,
    0xF556, 0x3D31, 0x1CAD, 0xD4CA, 0x4404, 0x8C63, 0x073C, 0xCF5B, 0x5F95,
    0x97F2, 0xB66E, 0x7E09, 0xEEC7, 0x26A0, 0x301E, 0xF879, 0x68B7, 0xA0D0,
    0x814C, 0x492B, 0xD9E5, 0x1182, 0x9ADD, 0x52BA, 0xC274, 0x0A13, 0x2B8F,
    0xE3E8, 0x7326, 0xBB41, 0x7177, 0xB910, 0x29DE, 0xE1B9, 0xC025, 0x0842,
    0x988C, 0x50EB, 0xDBB4, 0x13D3, 0x831D, 0x4B7A, 0x6AE6, 0xA281, 0x324F,
    0xFA28, 0xEC96, 0x24F1, 0xB43F, 0x7C58, 0x5DC4, 0x95A3, 0x056D, 0xCD0A,
    0x4655, 0x8E32, 0x1EFC, 0xD69B, 0xF707, 0x3F60, 0xAFAE, 0x67C9, 0x82D2,
    0x4AB5, 0xDA7B, 0x121C, 0x3380, 0xFBE7, 0x6B29, 0xA34E, 0x2811, 0xE076,
    0x70B8, 0xB8DF, 0x9943, 0x5124, 0xC1EA, 0x098D, 0x1F33, 0xD754, 0x479A,
    0x8FFD, 0xAE61, 0x6606, 0xF6C8, 0x3EAF, 0xB5F0, 0x7D97, 0xED59, 0x253E,
    0x04A2, 0xCCC5, 0x5C0B, 0x946C};
#endif
#ifdef CRC32_0xA833982B_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0xA833982B --> x^32 + x^31 + x^29 + x^27 + x^21 +
 * x^20 + x^17 + x^16 + x^15 + x^12 + x^11 + x^5 + x^3 + x + 1
 */
static const uint32_t CRC32_0xA833982B_table[256] = {
    0x00000000, 0xA833982B, 0xF854A87D, 0x50673056, 0x589AC8D1, 0xF0A950FA,
    0xA0CE60AC, 0x08FDF887, 0xB13591A2, 0x19060989, 0x496139DF, 0xE152A1F4,
    0xE9AF5973, 0x419CC158, 0x11FBF10E, 0xB9C86925, 0xCA58BB6F, 0x626B2344,
    0x320C1312, 0x9A3F8B39, 0x92C273BE, 0x3AF1EB95, 0x6A96DBC3, 0xC2A543E8,
    0x7B6D2ACD, 0xD35EB2E6, 0x833982B0, 0x2B0A1A9B, 0x23F7E21C, 0x8BC47A37,
    0xDBA34A61, 0x7390D24A, 0x3C82EEF5, 0x94B176DE, 0xC4D64688, 0x6CE5DEA3,
    0x64182624, 0xCC2BBE0F, 0x9C4C8E59, 0x347F1672, 0x8DB77F57, 0x2584E77C,
    0x75E3D72A, 0xDDD04F01, 0xD52DB786, 0x7D1E2FAD, 0x2D791FFB, 0x854A87D0,
    0xF6DA559A, 0x5EE9CDB1, 0x0E8EFDE7, 0xA6BD65CC, 0xAE409D4B, 0x06730560,
    0x56143536, 0xFE27AD1D, 0x47EFC438, 0xEFDC5C13, 0xBFBB6C45, 0x1788F46E,
    0x1F750CE9, 0xB74694C2, 0xE721A494, 0x4F123CBF, 0x7905DDEA, 0xD13645C1,
    0x81517597, 0x2962EDBC, 0x219F153B, 0x89AC8D10, 0xD9CBBD46, 0x71F8256D,
    0xC8304C48, 0x6003D463, 0x3064E435, 0x98577C1E, 0x90AA8499, 0x38991CB2,
    0x68FE2CE4, 0xC0CDB4CF, 0xB35D6685, 0x1B6EFEAE, 0x4B09CEF8, 0xE33A56D3,
    0xEBC7AE54, 0x43F4367F, 0x13930629, 0xBBA09E02, 0x0268F727, 0xAA5B6F0C,
    0xFA3C5F5A, 0x520FC771, 0x5AF23FF6, 0xF2C1A7DD, 0xA2A6978B, 0x0A950FA0,
    0x4587331F, 0xEDB4AB34, 0xBDD39B62, 0x15E00349, 0x1D1DFBCE, 0xB52E63E5,
    0xE54953B3, 0x4D7ACB98, 0xF4B2A2BD, 0x5C813A96, 0x0CE60AC0, 0xA4D592EB,
    0xAC286A6C, 0x041BF247, 0x547CC211, 0xFC4F5A3A, 0x8FDF8870, 0x27EC105B,
    0x778B200D, 0xDFB8B826, 0xD74540A1, 0x7F76D88A, 0x2F11E8DC, 0x872270F7,
    0x3EEA19D2, 0x96D981F9, 0xC6BEB1AF, 0x6E8D2984, 0x6670D103, 0xCE434928,
    0x9E24797E, 0x3617E155, 0xF20BBBD4, 0x5A3823FF, 0x0A5F13A9, 0xA26C8B82,
    0xAA917305, 0x02A2EB2E, 0x52C5DB78, 0xFAF64353, 0x433E2A76, 0xEB0DB25D,
    0xBB6A820B, 0x13591A20, 0x1BA4E2A7, 0xB3977A8C, 0xE3F04ADA, 0x4BC3D2F1,
    0x385300BB, 0x90609890, 0xC007A8C6, 0x683430ED, 0x60C9C86A, 0xC8FA5041,
    0x989D6017, 0x30AEF83C, 0x89669119, 0x21550932, 0x71323964, 0xD901A14F,
    0xD1FC59C8, 0x79CFC1E3, 0x29A8F1B5, 0x819B699E, 0xCE895521, 0x66BACD0A,
    0x36DDFD5C, 0x9EEE6577, 0x96139DF0, 0x3E2005DB, 0x6E47358D, 0xC674ADA6,
    0x7FBCC483, 0xD78F5CA8, 0x87E86CFE, 0x2FDBF4D5, 0x27260C52, 0x8F159479,
    0xDF72A42F, 0x77413C04, 0x04D1EE4E, 0xACE27665, 0xFC854633, 0x54B6DE18,
    0x5C4B269F, 0xF478BEB4, 0xA41F8EE2, 0x0C2C16C9, 0xB5E47FEC, 0x1DD7E7C7,
    0x4DB0D791, 0xE5834FBA, 0xED7EB73D, 0x454D2F16, 0x152A1F40, 0xBD19876B,
    0x8B0E663E, 0x233DFE15, 0x735ACE43, 0xDB695668, 0xD394AEEF, 0x7BA736C4,
    0x2BC00692, 0x83F39EB9, 0x3A3BF79C, 0x92086FB7, 0xC26F5FE1, 0x6A5CC7CA,
    0x62A13F4D, 0xCA92A766, 0x9AF59730, 0x32C60F1B, 0x4156DD51, 0xE965457A,
    0xB902752C, 0x1131ED07, 0x19CC1580, 0xB1FF8DAB, 0xE198BDFD, 0x49AB25D6,
    0xF0634CF3, 0x5850D4D8, 0x0837E48E, 0xA0047CA5, 0xA8F98422, 0x00CA1C09,
    0x50AD2C5F, 0xF89EB474, 0xB78C88CB, 0x1FBF10E0, 0x4FD820B6, 0xE7EBB89D,
    0xEF16401A, 0x4725D831, 0x1742E867, 0xBF71704C, 0x06B91969, 0xAE8A8142,
    0xFEEDB114, 0x56DE293F, 0x5E23D1B8, 0xF6104993, 0xA67779C5, 0x0E44E1EE,
    0x7DD433A4, 0xD5E7AB8F, 0x85809BD9, 0x2DB303F2, 0x254EFB75, 0x8D7D635E,
    0xDD1A5308, 0x7529CB23, 0xCCE1A206, 0x64D23A2D, 0x34B50A7B, 0x9C869250,
    0x947B6AD7, 0x3C48F2FC, 0x6C2FC2AA, 0xC41C5A81};
#endif
#ifdef CRC32_0x814141AB_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x814141AB --> x^32 + x^31 + x^24 + x^22 + x^16 +
 * x^14 + x^8 + x^7 + x^5 + x^3 + x + 1
 */
static const uint32_t CRC32_0x814141AB_table[256] = {
    0x00000000, 0x814141AB, 0x83C3C2FD, 0x02828356, 0x86C6C451, 0x078785FA,
    0x050506AC, 0x84444707, 0x8CCCC909, 0x0D8D88A2, 0x0F0F0BF4, 0x8E4E4A5F,
    0x0A0A0D58, 0x8B4B4CF3, 0x89C9CFA5, 0x08888E0E, 0x98D8D3B9, 0x19999212,
    0x1B1B1144, 0x9A5A50EF, 0x1E1E17E8, 0x9F5F5643, 0x9DDDD515, 0x1C9C94BE,
    0x14141AB0, 0x95555B1B, 0x97D7D84D, 0x169699E6, 0x92D2DEE1, 0x13939F4A,
    0x11111C1C, 0x90505DB7, 0xB0F0E6D9, 0x31B1A772, 0x33332424, 0xB272658F,
    0x36362288, 0xB7776323, 0xB5F5E075, 0x34B4A1DE, 0x3C3C2FD0, 0xBD7D6E7B,
    0xBFFFED2D, 0x3EBEAC86, 0xBAFAEB81, 0x3BBBAA2A, 0x3939297C, 0xB87868D7,
    0x28283560, 0xA96974CB, 0xABEBF79D, 0x2AAAB636, 0xAEEEF131, 0x2FAFB09A,
    0x2D2D33CC, 0xAC6C7267, 0xA4E4FC69, 0x25A5BDC2, 0x27273E94, 0xA6667F3F,
    0x22223838, 0xA3637993, 0xA1E1FAC5, 0x20A0BB6E, 0xE0A08C19, 0x61E1CDB2,
    0x63634EE4, 0xE2220F4F, 0x66664848, 0xE72709E3, 0xE5A58AB5, 0x64E4CB1E,
    0x6C6C4510, 0xED2D04BB, 0xEFAF87ED, 0x6EEEC646, 0xEAAA8141, 0x6BEBC0EA,
    0x696943BC, 0xE8280217, 0x78785FA0, 0xF9391E0B, 0xFBBB9D5D, 0x7AFADCF6,
    0xFEBE9BF1, 0x7FFFDA5A, 0x7D7D590C, 0xFC3C18A7, 0xF4B496A9, 0x75F5D702,
    0x77775454, 0xF63615FF, 0x727252F8, 0xF3331353, 0xF1B19005, 0x70F0D1AE,
    0x50506AC0, 0xD1112B6B, 0xD393A83D, 0x52D2E996, 0xD696AE91, 0x57D7EF3A,
    0x55556C6C, 0xD4142DC7, 0xDC9CA3C9, 0x5DDDE262, 0x5F5F6134, 0xDE1E209F,
    0x5A5A6798, 0xDB1B2633, 0xD999A565, 0x58D8E4CE, 0xC888B979, 0x49C9F8D2,
    0x4B4B7B84, 0xCA0A3A2F, 0x4E4E7D28, 0xCF0F3C83, 0xCD8DBFD5, 0x4CCCFE7E,
    0x44447070, 0xC50531DB, 0xC787B28D, 0x46C6F326, 0xC282B421, 0x43C3F58A,
    0x414176DC, 0xC0003777, 0x40005999, 0xC1411832, 0xC3C39B64, 0x4282DACF,
    0xC6C69DC8, 0x4787DC63, 0x45055F35, 0xC4441E9E, 0xCCCC9090, 0x4D8DD13B,
    0x4F0F526D, 0xCE4E13C6, 0x4A0A54C1, 0xCB4B156A, 0xC9C9963C, 0x4888D797,
    0xD8D88A20, 0x5999CB8B, 0x5B1B48DD, 0xDA5A0976, 0x5E1E4E71, 0xDF5F0FDA,
    0xDDDD8C8C, 0x5C9CCD27, 0x54144329, 0xD5550282, 0xD7D781D4, 0x5696C07F,
    0xD2D28778, 0x5393C6D3, 0x51114585, 0xD050042E, 0xF0F0BF40, 0x71B1FEEB,
    0x73337DBD, 0xF2723C16, 0x76367B11, 0xF7773ABA, 0xF5F5B9EC, 0x74B4F847,
    0x7C3C7649, 0xFD7D37E2, 0xFFFFB4B4, 0x7EBEF51F, 0xFAFAB218, 0x7BBBF3B3,
    0x793970E5, 0xF878314E, 0x68286CF9, 0xE9692D52, 0xEBEBAE04, 0x6AAAEFAF,
    0xEEEEA8A8, 0x6FAFE903, 0x6D2D6A55, 0xEC6C2BFE, 0xE4E4A5F0, 0x65A5E45B,
    0x6727670D, 0xE66626A6, 0x622261A1, 0xE363200A, 0xE1E1A35C, 0x60A0E2F7,
    0xA0A0D580, 0x21E1942B, 0x2363177D, 0xA22256D6, 0x266611D1, 0xA727507A,
    0xA5A5D32C, 0x24E49287, 0x2C6C1C89, 0xAD2D5D22, 0xAFAFDE74, 0x2EEE9FDF,
    0xAAAAD8D8, 0x2BEB9973, 0x29691A25, 0xA8285B8E, 0x38780639, 0xB9394792,
    0xBBBBC4C4, 0x3AFA856F, 0xBEBEC268, 0x3FFF83C3, 0x3D7D0095, 0xBC3C413E,
    0xB4B4CF30, 0x35F58E9B, 0x37770DCD, 0xB6364C66, 0x32720B61, 0xB3334ACA,
    0xB1B1C99C, 0x30F08837, 0x10503359, 0x911172F2, 0x9393F1A4, 0x12D2B00F,
    0x9696F708, 0x17D7B6A3, 0x155535F5, 0x9414745E, 0x9C9CFA50, 0x1DDDBBFB,
    0x1F5F38AD, 0x9E1E7906, 0x1A5A3E01, 0x9B1B7FAA, 0x9999FCFC, 0x18D8BD57,
    0x8888E0E0, 0x09C9A14B, 0x0B4B221D, 0x8A0A63B6, 0x0E4E24B1, 0x8F0F651A,
    0x8D8DE64C, 0x0CCCA7E7, 0x044429E9, 0x85056842, 0x8787EB14, 0x06C6AABF,
    0x8282EDB8, 0x03C3AC13, 0x01412F45, 0x80006EEE};
#endif
#ifdef CRC32_0x1EDC6F41_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x1EDC6F41 --> x^32 + x^28 + x^27 + x^26 + x^25 +
 * x^23 + x^22 + x^20 + x^19 + x^18 + x^14 + x^13 + x^11 + x^10 + x^9 + x^8 +
 * x^6 + 1
 */
static const uint32_t CRC32_0x1EDC6F41_table[256] = {
    0x00000000, 0x1EDC6F41, 0x3DB8DE82, 0x2364B1C3, 0x7B71BD04, 0x65ADD245,
    0x46C96386, 0x58150CC7, 0xF6E37A08, 0xE83F1549, 0xCB5BA48A, 0xD587CBCB,
    0x8D92C70C, 0x934EA84D, 0xB02A198E, 0xAEF676CF, 0xF31A9B51, 0xEDC6F410,
    0xCEA245D3, 0xD07E2A92, 0x886B2655, 0x96B74914, 0xB5D3F8D7, 0xAB0F9796,
    0x05F9E159, 0x1B258E18, 0x38413FDB, 0x269D509A, 0x7E885C5D, 0x6054331C,
    0x433082DF, 0x5DECED9E, 0xF8E959E3, 0xE63536A2, 0xC5518761, 0xDB8DE820,
    0x8398E4E7, 0x9D448BA6, 0xBE203A65, 0xA0FC5524, 0x0E0A23EB, 0x10D64CAA,
    0x33B2FD69, 0x2D6E9228, 0x757B9EEF, 0x6BA7F1AE, 0x48C3406D, 0x561F2F2C,
    0x0BF3C2B2, 0x152FADF3, 0x364B1C30, 0x28977371, 0x70827FB6, 0x6E5E10F7,
    0x4D3AA134, 0x53E6CE75, 0xFD10B8BA, 0xE3CCD7FB, 0xC0A86638, 0xDE740979,
    0x866105BE, 0x98BD6AFF, 0xBBD9DB3C, 0xA505B47D, 0xEF0EDC87, 0xF1D2B3C6,
    0xD2B60205, 0xCC6A6D44, 0x947F6183, 0x8AA30EC2, 0xA9C7BF01, 0xB71BD040,
    0x19EDA68F, 0x0731C9CE, 0x2455780D, 0x3A89174C, 0x629C1B8B, 0x7C4074CA,
    0x5F24C509, 0x41F8AA48, 0x1C1447D6, 0x02C82897, 0x21AC9954, 0x3F70F615,
    0x6765FAD2, 0x79B99593, 0x5ADD2450, 0x44014B11, 0xEAF73DDE, 0xF42B529F,
    0xD74FE35C, 0xC9938C1D, 0x918680DA, 0x8F5AEF9B, 0xAC3E5E58, 0xB2E23119,
    0x17E78564, 0x093BEA25, 0x2A5F5BE6, 0x348334A7, 0x6C963860, 0x724A5721,
    0x512EE6E2, 0x4FF289A3, 0xE104FF6C, 0xFFD8902D, 0xDCBC21EE, 0xC2604EAF,
    0x9A754268, 0x84A92D29, 0xA7CD9CEA, 0xB911F3AB, 0xE4FD1E35, 0xFA217174,
    0xD945C0B7, 0xC799AFF6, 0x9F8CA331, 0x8150CC70, 0xA2347DB3, 0xBCE812F2,
    0x121E643D, 0x0CC20B7C, 0x2FA6BABF, 0x317AD5FE, 0x696FD939, 0x77B3B678,
    0x54D707BB, 0x4A0B68FA, 0xC0C1D64F, 0xDE1DB90E, 0xFD7908CD, 0xE3A5678C,
    0xBBB06B4B, 0xA56C040A, 0x8608B5C9, 0x98D4DA88, 0x3622AC47, 0x28FEC306,
    0x0B9A72C5, 0x15461D84, 0x4D531143, 0x538F7E02, 0x70EBCFC1, 0x6E37A080,
    0x33DB4D1E, 0x2D07225F, 0x0E63939C, 0x10BFFCDD, 0x48AAF01A, 0x56769F5B,
    0x75122E98, 0x6BCE41D9, 0xC5383716, 0xDBE45857, 0xF880E994, 0xE65C86D5,
    0xBE498A12, 0xA095E553, 0x83F15490, 0x9D2D3BD1, 0x38288FAC, 0x26F4E0ED,
    0x0590512E, 0x1B4C3E6F, 0x435932A8, 0x5D855DE9, 0x7EE1EC2A, 0x603D836B,
    0xCECBF5A4, 0xD0179AE5, 0xF3732B26, 0xEDAF4467, 0xB5BA48A0, 0xAB6627E1,
    0x88029622, 0x96DEF963, 0xCB3214FD, 0xD5EE7BBC, 0xF68ACA7F, 0xE856A53E,
    0xB043A9F9, 0xAE9FC6B8, 0x8DFB777B, 0x9327183A, 0x3DD16EF5, 0x230D01B4,
    0x0069B077, 0x1EB5DF36, 0x46A0D3F1, 0x587CBCB0, 0x7B180D73, 0x65C46232,
    0x2FCF0AC8, 0x31136589, 0x1277D44A, 0x0CABBB0B, 0x54BEB7CC, 0x4A62D88D,
    0x6906694E, 0x77DA060F, 0xD92C70C0, 0xC7F01F81, 0xE494AE42, 0xFA48C103,
    0xA25DCDC4, 0xBC81A285, 0x9FE51346, 0x81397C07, 0xDCD59199, 0xC209FED8,
    0xE16D4F1B, 0xFFB1205A, 0xA7A42C9D, 0xB97843DC, 0x9A1CF21F, 0x84C09D5E,
    0x2A36EB91, 0x34EA84D0, 0x178E3513, 0x09525A52, 0x51475695, 0x4F9B39D4,
    0x6CFF8817, 0x7223E756, 0xD726532B, 0xC9FA3C6A, 0xEA9E8DA9, 0xF442E2E8,
    0xAC57EE2F, 0xB28B816E, 0x91EF30AD, 0x8F335FEC, 0x21C52923, 0x3F194662,
    0x1C7DF7A1, 0x02A198E0, 0x5AB49427, 0x4468FB66, 0x670C4AA5, 0x79D025E4,
    0x243CC87A, 0x3AE0A73B, 0x198416F8, 0x075879B9, 0x5F4D757E, 0x41911A3F,
    0x62F5ABFC, 0x7C29C4BD, 0xD2DFB272, 0xCC03DD33, 0xEF676CF0, 0xF1BB03B1,
    0xA9AE0F76, 0xB7726037, 0x9416D1F4, 0x8ACABEB5};
#endif
#ifdef CRC32_0x04C11DB7_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x04C11DB7 --> x^32 + x^26 + x^23 + x^22 + x^16 +
 * x^12 + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
 */
static const uint32_t CRC32_0x04C11DB7_table[256] = {
    0x00000000UL, 0x04C11DB7UL, 0x09823B6EUL, 0x0D4326D9UL, 0x130476DCUL,
    0x17C56B6BUL, 0x1A864DB2UL, 0x1E475005UL, 0x2608EDB8UL, 0x22C9F00FUL,
    0x2F8AD6D6UL, 0x2B4BCB61UL, 0x350C9B64UL, 0x31CD86D3UL, 0x3C8EA00AUL,
    0x384FBDBDUL, 0x4C11DB70UL, 0x48D0C6C7UL, 0x4593E01EUL, 0x4152FDA9UL,
    0x5F15ADACUL, 0x5BD4B01BUL, 0x569796C2UL, 0x52568B75UL, 0x6A1936C8UL,
    0x6ED82B7FUL, 0x639B0DA6UL, 0x675A1011UL, 0x791D4014UL, 0x7DDC5DA3UL,
    0x709F7B7AUL, 0x745E66CDUL, 0x9823B6E0UL, 0x9CE2AB57UL, 0x91A18D8EUL,
    0x95609039UL, 0x8B27C03CUL, 0x8FE6DD8BUL, 0x82A5FB52UL, 0x8664E6E5UL,
    0xBE2B5B58UL, 0xBAEA46EFUL, 0xB7A96036UL, 0xB3687D81UL, 0xAD2F2D84UL,
    0xA9EE3033UL, 0xA4AD16EAUL, 0xA06C0B5DUL, 0xD4326D90UL, 0xD0F37027UL,
    0xDDB056FEUL, 0xD9714B49UL, 0xC7361B4CUL, 0xC3F706FBUL, 0xCEB42022UL,
    0xCA753D95UL, 0xF23A8028UL, 0xF6FB9D9FUL, 0xFBB8BB46UL, 0xFF79A6F1UL,
    0xE13EF6F4UL, 0xE5FFEB43UL, 0xE8BCCD9AUL, 0xEC7DD02DUL, 0x34867077UL,
    0x30476DC0UL, 0x3D044B19UL, 0x39C556AEUL, 0x278206ABUL, 0x23431B1CUL,
    0x2E003DC5UL, 0x2AC12072UL, 0x128E9DCFUL, 0x164F8078UL, 0x1B0CA6A1UL,
    0x1FCDBB16UL, 0x018AEB13UL, 0x054BF6A4UL, 0x0808D07DUL, 0x0CC9CDCAUL,
    0x7897AB07UL, 0x7C56B6B0UL, 0x71159069UL, 0x75D48DDEUL, 0x6B93DDDBUL,
    0x6F52C06CUL, 0x6211E6B5UL, 0x66D0FB02UL, 0x5E9F46BFUL, 0x5A5E5B08UL,
    0x571D7DD1UL, 0x53DC6066UL, 0x4D9B3063UL, 0x495A2DD4UL, 0x44190B0DUL,
    0x40D816BAUL, 0xACA5C697UL, 0xA864DB20UL, 0xA527FDF9UL, 0xA1E6E04EUL,
    0xBFA1B04BUL, 0xBB60ADFCUL, 0xB6238B25UL, 0xB2E29692UL, 0x8AAD2B2FUL,
    0x8E6C3698UL, 0x832F1041UL, 0x87EE0DF6UL, 0x99A95DF3UL, 0x9D684044UL,
    0x902B669DUL, 0x94EA7B2AUL, 0xE0B41DE7UL, 0xE4750050UL, 0xE9362689UL,
    0xEDF73B3EUL, 0xF3B06B3BUL, 0xF771768CUL, 0xFA325055UL, 0xFEF34DE2UL,
    0xC6BCF05FUL, 0xC27DEDE8UL, 0xCF3ECB31UL, 0xCBFFD686UL, 0xD5B88683UL,
    0xD1799B34UL, 0xDC3ABDEDUL, 0xD8FBA05AUL, 0x690CE0EEUL, 0x6DCDFD59UL,
    0x608EDB80UL, 0x644FC637UL, 0x7A089632UL, 0x7EC98B85UL, 0x738AAD5CUL,
    0x774BB0EBUL, 0x4F040D56UL, 0x4BC510E1UL, 0x46863638UL, 0x42472B8FUL,
    0x5C007B8AUL, 0x58C1663DUL, 0x558240E4UL, 0x51435D53UL, 0x251D3B9EUL,
    0x21DC2629UL, 0x2C9F00F0UL, 0x285E1D47UL, 0x36194D42UL, 0x32D850F5UL,
    0x3F9B762CUL, 0x3B5A6B9BUL, 0x0315D626UL, 0x07D4CB91UL, 0x0A97ED48UL,
    0x0E56F0FFUL, 0x1011A0FAUL, 0x14D0BD4DUL, 0x19939B94UL, 0x1D528623UL,
    0xF12F560EUL, 0xF5EE4BB9UL, 0xF8AD6D60UL, 0xFC6C70D7UL, 0xE22B20D2UL,
    0xE6EA3D65UL, 0xEBA91BBCUL, 0xEF68060BUL, 0xD727BBB6UL, 0xD3E6A601UL,
    0xDEA580D8UL, 0xDA649D6FUL, 0xC423CD6AUL, 0xC0E2D0DDUL, 0xCDA1F604UL,
    0xC960EBB3UL, 0xBD3E8D7EUL, 0xB9FF90C9UL, 0xB4BCB610UL, 0xB07DABA7UL,
    0xAE3AFBA2UL, 0xAAFBE615UL, 0xA7B8C0CCUL, 0xA379DD7BUL, 0x9B3660C6UL,
    0x9FF77D71UL, 0x92B45BA8UL, 0x9675461FUL, 0x8832161AUL, 0x8CF30BADUL,
    0x81B02D74UL, 0x857130C3UL, 0x5D8A9099UL, 0x594B8D2EUL, 0x5408ABF7UL,
    0x50C9B640UL, 0x4E8EE645UL, 0x4A4FFBF2UL, 0x470CDD2BUL, 0x43CDC09CUL,
    0x7B827D21UL, 0x7F436096UL, 0x7200464FUL, 0x76C15BF8UL, 0x68860BFDUL,
    0x6C47164AUL, 0x61043093UL, 0x65C52D24UL, 0x119B4BE9UL, 0x155A565EUL,
    0x18197087UL, 0x1CD86D30UL, 0x029F3D35UL, 0x065E2082UL, 0x0B1D065BUL,
    0x0FDC1BECUL, 0x3793A651UL, 0x3352BBE6UL, 0x3E119D3FUL, 0x3AD08088UL,
    0x2497D08DUL, 0x2056CD3AUL, 0x2D15EBE3UL, 0x29D4F654UL, 0xC5A92679UL,
    0xC1683BCEUL, 0xCC2B1D17UL, 0xC8EA00A0UL, 0xD6AD50A5UL, 0xD26C4D12UL,
    0xDF2F6BCBUL, 0xDBEE767CUL, 0xE3A1CBC1UL, 0xE760D676UL, 0xEA23F0AFUL,
    0xEEE2ED18UL, 0xF0A5BD1DUL, 0xF464A0AAUL, 0xF9278673UL, 0xFDE69BC4UL,
    0x89B8FD09UL, 0x8D79E0BEUL, 0x803AC667UL, 0x84FBDBD0UL, 0x9ABC8BD5UL,
    0x9E7D9662UL, 0x933EB0BBUL, 0x97FFAD0CUL, 0xAFB010B1UL, 0xAB710D06UL,
    0xA6322BDFUL, 0xA2F33668UL, 0xBCB4666DUL, 0xB8757BDAUL, 0xB5365D03UL,
    0xB1F740B4UL};
#endif
#ifdef CRC32_0x000000AF_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x000000AF --> x^32 + x^7 + x^5 + x^3 + x^2 + x +
 * 1
 */
static const uint32_t CRC32_0x000000AF_table[256] = {
    0x00000000, 0x000000AF, 0x0000015E, 0x000001F1, 0x000002BC, 0x00000213,
    0x000003E2, 0x0000034D, 0x00000578, 0x000005D7, 0x00000426, 0x00000489,
    0x000007C4, 0x0000076B, 0x0000069A, 0x00000635, 0x00000AF0, 0x00000A5F,
    0x00000BAE, 0x00000B01, 0x0000084C, 0x000008E3, 0x00000912, 0x000009BD,
    0x00000F88, 0x00000F27, 0x00000ED6, 0x00000E79, 0x00000D34, 0x00000D9B,
    0x00000C6A, 0x00000CC5, 0x000015E0, 0x0000154F, 0x000014BE, 0x00001411,
    0x0000175C, 0x000017F3, 0x00001602, 0x000016AD, 0x00001098, 0x00001037,
    0x000011C6, 0x00001169, 0x00001224, 0x0000128B, 0x0000137A, 0x000013D5,
    0x00001F10, 0x00001FBF, 0x00001E4E, 0x00001EE1, 0x00001DAC, 0x00001D03,
    0x00001CF2, 0x00001C5D, 0x00001A68, 0x00001AC7, 0x00001B36, 0x00001B99,
    0x000018D4, 0x0000187B, 0x0000198A, 0x00001925, 0x00002BC0, 0x00002B6F,
    0x00002A9E, 0x00002A31, 0x0000297C, 0x000029D3, 0x00002822, 0x0000288D,
    0x00002EB8, 0x00002E17, 0x00002FE6, 0x00002F49, 0x00002C04, 0x00002CAB,
    0x00002D5A, 0x00002DF5, 0x00002130, 0x0000219F, 0x0000206E, 0x000020C1,
    0x0000238C, 0x00002323, 0x000022D2, 0x0000227D, 0x00002448, 0x000024E7,
    0x00002516, 0x000025B9, 0x000026F4, 0x0000265B, 0x000027AA, 0x00002705,
    0x00003E20, 0x00003E8F, 0x00003F7E, 0x00003FD1, 0x00003C9C, 0x00003C33,
    0x00003DC2, 0x00003D6D, 0x00003B58, 0x00003BF7, 0x00003A06, 0x00003AA9,
    0x000039E4, 0x0000394B, 0x000038BA, 0x00003815, 0x000034D0, 0x0000347F,
    0x0000358E, 0x00003521, 0x0000366C, 0x000036C3, 0x00003732, 0x0000379D,
    0x000031A8, 0x00003107, 0x000030F6, 0x00003059, 0x00003314, 0x000033BB,
    0x0000324A, 0x000032E5, 0x00005780, 0x0000572F, 0x000056DE, 0x00005671,
    0x0000553C, 0x00005593, 0x00005462, 0x000054CD, 0x000052F8, 0x00005257,
    0x000053A6, 0x00005309, 0x00005044, 0x000050EB, 0x0000511A, 0x000051B5,
    0x00005D70, 0x00005DDF, 0x00005C2E, 0x00005C81, 0x00005FCC, 0x00005F63,
    0x00005E92, 0x00005E3D, 0x00005808, 0x000058A7, 0x00005956, 0x000059F9,
    0x00005AB4, 0x00005A1B, 0x00005BEA, 0x00005B45, 0x00004260, 0x000042CF,
    0x0000433E, 0x00004391, 0x000040DC, 0x00004073, 0x00004182, 0x0000412D,
    0x00004718, 0x000047B7, 0x00004646, 0x000046E9, 0x000045A4, 0x0000450B,
    0x000044FA, 0x00004455, 0x00004890, 0x0000483F, 0x000049CE, 0x00004961,
    0x00004A2C, 0x00004A83, 0x00004B72, 0x00004BDD, 0x00004DE8, 0x00004D47,
    0x00004CB6, 0x00004C19, 0x00004F54, 0x00004FFB, 0x00004E0A, 0x00004EA5,
    0x00007C40, 0x00007CEF, 0x00007D1E, 0x00007DB1, 0x00007EFC, 0x00007E53,
    0x00007FA2, 0x00007F0D, 0x00007938, 0x00007997, 0x00007866, 0x000078C9,
    0x00007B84, 0x00007B2B, 0x00007ADA, 0x00007A75, 0x000076B0, 0x0000761F,
    0x000077EE, 0x00007741, 0x0000740C, 0x000074A3, 0x00007552, 0x000075FD,
    0x000073C8, 0x00007367, 0x00007296, 0x00007239, 0x00007174, 0x000071DB,
    0x0000702A, 0x00007085, 0x000069A0, 0x0000690F, 0x000068FE, 0x00006851,
    0x00006B1C, 0x00006BB3, 0x00006A42, 0x00006AED, 0x00006CD8, 0x00006C77,
    0x00006D86, 0x00006D29, 0x00006E64, 0x00006ECB, 0x00006F3A, 0x00006F95,
    0x00006350, 0x000063FF, 0x0000620E, 0x000062A1, 0x000061EC, 0x00006143,
    0x000060B2, 0x0000601D, 0x00006628, 0x00006687, 0x00006776, 0x000067D9,
    0x00006494, 0x0000643B, 0x000065CA, 0x00006565};
#endif
#ifdef CRC32_0x32583499_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x32583499 --> x^32 + x^29 + x^28 + x^25 + x^22 +
 * x^20 + x^19 + x^13 + x^12 + x^10 + x^7 + x^4 + x^3 + 1
 */
static const uint32_t CRC32_0x32583499_table[256] = {
    // Pendiente por implementar
};

#ifdef CRC32_0x741B8CD7_LOOKUP_TABLE
/**
 * @brief Polinomio generador: 0x741B8CD7 --> x^32 + x^30 + x^29 + x^28 + x^26 +
 * x^20 + x^19 + x^17 + x^16 + x^15 + x^11 + x^10 + x^7 + x^6 + x^4 + x^2 + x +
 * 1
 */
static const uint32_t CRC32_0x741B8CD7_table[256] = {
    // Pendiente por implementar
};
#endif
#endif

/* Function Prototypes */

/**
 * @brief Function to obtain the generator polynomial for 8-bit CRC.
 * @param crc_type (crc_t) enumeration data of the CRC type in question
 * @return Polynomial in hexadecimal format for 8-bit CRC calculation.
 */
uint8_t CRC8_getPoly(crc_t crc_type);

/**
 * @brief Function to obtain the generator polynomial for 16-bit CRC.
 * @param crc_type (crc_t) enumeration data of the CRC type in question
 * @return Polynomial in hexadecimal format for 16-bit CRC calculation.
 */
uint16_t CRC16_getPoly(crc_t crc_type);

/**
 * @brief Function to obtain the generator polynomial for 32-bit CRC.
 * @param crc_type (crc_t) enumeration data of the CRC type in question
 * @return Polynomial in hexadecimal format for 32-bit CRC calculation.
 */
uint32_t CRC32_getPoly(crc_t crc_type);

/**
 * @brief Function to obtain initial values (seed) for 8-bit CRC
 * @param crc_type (crc_t) enumeration data of the CRC type in question
 * @return Initial value (seed) in hexadecimal format for 8-bit CRC calculation
 */
uint8_t CRC8_getSeed(crc_t crc_type);

/**
 * @brief Function to obtain initial values (seed) for 16-bit CRC
 * @param crc_type (crc_t) enumeration data of the CRC type in question
 * @return Initial value (seed) in hexadecimal format for 16-bit CRC calculation
 */
uint16_t CRC16_getSeed(crc_t crc_type);

/**
 * @brief Function to obtain initial values (seed) for 32-bit CRC
 * @param crc_type (crc_t) enumeration data of the CRC type in question
 * @return Initial value (seed) in hexadecimal format for 32-bit CRC calculation
 */
uint32_t CRC32_getSeed(crc_t crc_type);

/**
 * @brief Function to verify input reflected value for 8, 16 and 32-bit CRC.
 * @param crc_type (crc_t) enumeration data of the CRC type in question.
 * @return true if the CRC in question requires reflected (inverted) input data,
 * false otherwise.
 */
bool CRC_getInputReflected(crc_t crc_type);

/**
 * @brief Function to verify output reflected value for 8, 16 and 32-bit CRC.
 * @param crc_type (crc_t) enumeration data of the CRC type in question.
 * @return true if the CRC in question requires reflected (inverted) output
 * data, false otherwise.
 */
bool CRC_getOutputReflected(crc_t crc_type);

/**
 * @brief Function to obtain XOR mask value for 8-bit CRC output.
 * @param crc_type (crc_t) enumeration data of the CRC type in question.
 * @return Final XOR mask depending on the required CRC. If 0,
 * means the CRC algorithm doesn't require XOR mask.
 */
uint8_t CRC8_getFinalXOR(crc_t crc_type);

/**
 * @brief Function to obtain XOR mask value for 16-bit CRC output.
 * @param crc_type (crc_t) enumeration data of the CRC type in question.
 * @return Final XOR mask depending on the required CRC. If 0,
 * means the CRC algorithm doesn't require XOR mask.
 */
uint16_t CRC16_getFinalXOR(crc_t crc_type);

/**
 * @brief Function to obtain XOR mask value for 32-bit CRC output.
 * @param crc_type (crc_t) enumeration data of the CRC type in question.
 * @return Final XOR mask depending on the required CRC. If 0,
 * means the CRC algorithm doesn't require XOR mask.
 */
uint32_t CRC32_getFinalXOR(crc_t crc_type);

/**
 * @brief Calculate CRC8 with error handling
 * @param data Pointer to input data
 * @param data_len Length of input data
 * @param crc_type Type of CRC8 implementation to use
 * @param[out] result Pointer to store CRC result
 * @return crc_error_t Error code indicating success or failure
 */
crc_error_t CRC8_Calculate(const void *data, size_t data_len, crc_t crc_type, uint8_t *result);

/**
 * @brief Calculates CRC8 checksum for given data
 *
 * @param data Pointer to input data buffer
 * @param data_len Length of input data in bytes
 * @param crc_type CRC algorithm variant to use
 * @return uint8_t Calculated CRC8 checksum
 */
uint8_t CRC8(const void *data, size_t data_len, crc_t crc_type);

/**
 * @brief Calculates CRC16 checksum with error handling
 * @param data Pointer to input data
 * @param data_len Length of input data
 * @param crc_type Type of CRC16 implementation to use
 * @param[out] result Pointer to store CRC result
 * @return crc_error_t Error code indicating success or failure
 */
crc_error_t CRC16_Calculate(const void *data, size_t data_len, crc_t crc_type, uint16_t *result);

/**
 * @brief Calculates CRC16 checksum for given data
 *
 * @param data Pointer to input data buffer
 * @param data_len Length of input data in bytes
 * @param crc_type CRC algorithm variant to use
 * @return uint16_t Calculated CRC16 checksum
 */
uint16_t CRC16(const void *data, size_t data_len, crc_t crc_type);

/**
 * @brief Calculates CRC32 checksum with error handling
 * @param data Pointer to input data
 * @param data_len Length of input data
 * @param crc_type Type of CRC32 implementation to use
 * @param[out] result Pointer to store CRC result
 * @return crc_error_t Error code indicating success or failure
 */
crc_error_t CRC32_Calculate(const void *data, size_t data_len, crc_t crc_type, uint32_t *result);

/**
 * @brief Calculates CRC32 checksum for given data
 *
 * @param data Pointer to input data buffer
 * @param data_len Length of input data in bytes
 * @param crc_type CRC algorithm variant to use
 * @return uint32_t Calculated CRC32 checksum
 */
uint32_t CRC32(const void *data, size_t data_len, crc_t crc_type);

#if defined(CRC_USE_IMPLEMENTATION_NAMES) && (CRC_USE_IMPLEMENTATION_NAMES == 1)
/**
 * @brief Gets the string name of a CRC implementation
 *
 * @param index Index from crc_t enum
 * @return const char* Name of the implementation or NULL if invalid index
 */
const char *get_crc_implementation_name(crc_t index);
#endif

#endif /*CRC_H*/
